:_:::::unit:;_
unit: . :unit: :unit: ;
unit: define :: ;
	
.	define register:r0; . define register:r1;
. 	define register:r2; . define register:r3;
.	define register:r4; . define register:r5;
. 	define register:r6; . define register:r7;
. 	define register:r8; . define register:r9;
. 	define register:r10; . define register:r11;
. 	define register:r12; . define register:r13;
. 	define register:r14; . define register:r15;

. 	define unit:if:register:<:register:,:label:;
. 	define unit:if:register:=:register:,:label:;
. 	define unit:at:label::unit:;
.	define unit:copy:register:,:register:;
.	define unit:increment:register:;
.	define unit:decrement:register:;
.	define unit:zero:register:;
.	define unit:add:register:,:register:;
.	define unit:subtract:register:,:register:;
.	define unit:multiply:register:,:register:;
.	define unit:divide:register:,:register:;
.	define unit:modulo:register:,:register:;
.	define unit:xor:register:,:register:;
.	define unit:and:register:,:register:;
.	define unit:or:register:,:register:;
.	define unit:store:register:,:register:;
.	define unit:load:register:,:register:;

. 	define unit: nop;
.	define unit: comment :: ;
 
. 	define label: continue outter loop;
. 	define label: move to next iteration;
.	define label: try next number;
.	define label: it's not composite;
.	define label: break out of the loop;

.	increment r2
.	increment r2
.	multiply r2, r2
. 	increment r2
.	add r2, r2

.	increment r9
.	increment r9
.	multiply r9, r9
.	multiply r9, r9
.	multiply r9, r9


.at continue outter loop
	
comment

	determine if a number is prime.	
	
	notes: 
		- r7 is the copy of the outter loop iterator, r8,  (it's one less!)

		- r15 is a copy of r7, for when we do the destructive modulo ins.

		- r5 is the iterator of the internal loop. 
			starts out at 2, and goes until its N - 1.

		- r6 is a boolean of whether or not the value r8 is prime.
			it starts out as TRUE, (1), but then is zero'd 
			when we find out its composite.

		- r10 always has the value zero.
;

.	copy r7, r8
.	decrement r7

.	zero r5
.	increment r5 
.	zero r6
.	increment r6

.at try next number

	increment r5
.	copy r15, r8
.	modulo r15, r5

.	if r10 < r15, it's not composite
.	zero r6
.	if r10 = r10,   break out of the loop

.at it's not composite

	if r5 < r7, try next number

.at break out of the loop

comment 

	if the number is prime, then write it to memory. ;

.	if r10 = r6, move to next iteration
.		store r4, r8
.		increment r4


.at move to next iteration

	increment r8
.	if r8 < r9, 	continue outter loop


nop



