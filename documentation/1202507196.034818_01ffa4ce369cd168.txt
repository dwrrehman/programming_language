a (currently unnamed) optimizing cross-assembler
written on 1202507196.013059 by dwrr
=======================================

this is an optimizing cross-assembler that i am making for fun and for my own use. the syntax is word-based, and features a powerful compile-time execution system, allowing for many optimizations to be written at user-level. the instruction set architectures which this assembler is able to target currently includes RISC-V 32 and 64 bit, ARM 64 bit, and the MSP430 ISA. supporting ARM 32 is planned, however not currently implemented. 

in addition to the machine instructions for all supported targets, there are several "compile-time" instructions available for use by the user to perform arbitrary transformations on the output machine code programmatically. all of these compile-time instructions take 0, 1, 2, or 3 arguments. 

all instructions, both all compile-time and all machine instructions, are written in a word-based, prefix, fixed-arity notation, atypical of most assemblers, making resultant code quite uniform and readable. the instruction name is always written first, followed by a predefined number of arguments, all of which are known at compile-time, (ie, they are simply constant data, after compile-time execution is finished), and all of these arguments are of the same type: unsigned binary integers, of various bit widths.

there are plans to support floating point arithmetic, however this is not currently implemented at all. additionally, several important instructions relating to memory atomic operations, in ARM64, and RISC-V are planned to be implemented eventually as well, but this isnt a major problem at the moment. finally, the entire ARM 32-bit backend/ISA is a major priority which i'll get to soon enough, hopefully. currently i just don't have a use for this ISA yet in my projects, however.


a list and description of all available instructions (both runtime and compiletime) and their semantics is given below:	


instruction listing:
----------------------------

	zero incr 
	nor nand si sd
	set add sub mul div
	ld st emit sect 
	at do lt eq 
	file del str eoi 

	rr ri rs rb ru rj

	mo mb

	svc mov bfm	
	adc addx addi addr adr 
	shv clz rev jmp bc br 
	cbz tbz ccmp csel 
	ori orr extr ldrl 
	memp memia memi memr 
	madd divr



------------------------------------
instruction set overview:
------------------------------------

compiletime:
---------------
	zero : set to zero
	incr : increment by one
	nor  : bitwise not-or
	nand : bitwise not-and
	si   : shift-increase / shift up
	sd   : shift-decrease / shift down
	set  : assignment / copy
	add  : addition
	sub  : subtraction
	mul  : multiplication
	div  : division
	ld   : load from compiletime memory
	st   : store to compiletime memory
	emit : emit data to executable
	sect : section address attribution
	at   : label attribution
	do   : unconditional jump / call
	lt   : branch on less-than comparison
	eq   : branch on equal comparison
	file : parse contents of file from the file system
	del  : delete variable from symbol table
	str  : emit bytes for verbatim string literal
	eoi  : end of input

RISC-V:
---------------
	rr : register-register integer operation instruction format
 	ri : register-immediate integer operation instruction format
	rs : store operation instruction format
	rb : register compare and branch to label instruction format
	ru : upper immediate load into register instruction format
	rj : unconditionally jump to label instruction format

MSP430:
---------------
	mo : arithmetic and bitwise operation instruction format, 
		with destination and source addressing modes 
	mb : branch on condition to label instruction format

arm64:
---------------
	svc 	: system call (supervisor call)
	mov 	: set register with 16 bit immediate source
	bfm 	: bit field move instruction
	adc 	: add/subtract with carry 
	addx 	: add/subtract with optionally sign/zero-extended register source 
	addi 	: add/subtract with immediate source
	addr 	: add/subtract with optionally shifted register source
	adr 	: load address of a PC-relative label into a register
	shv 	: variable-shift left or right of a register
	clz 	: count leading zeros of regsiter
	rev 	: reverse bits of register
	jmp 	: unconditional jump to label (with optional link)
	bc 	: conditional branch to label based on flags 
	br 	: branch to register value (with optional link)
	cbz 	: compare and branch if register is nonzero or zero
	tbz 	: test bit in register and branch to label if set
	ccmp 	: conditional compare instruction
	csel 	: conditional select / increment / invert / negate instruction
	ori 	: bitwise or/and/xor with immediate
	orr 	: bitwise or/and/xor with shifted register
	extr 	: extract instruction (?)
	ldrl 	: load register data with from label PC-relative address
	memp 	: load/store memory to/from pair of registers
	memia 	: load/store memory to/from register with post/pre increment addressing mode
	memi 	: load/store memory to/from register with address plus unsigned immediate offset
	memr 	: load/store memory to/from register with address plus register offset
	madd 	: multiply-accumulate / multiply-subtract instruction
	divr 	: divide register with register instruction





---------|---------|---------|---------|---------|---------|



more detailed descriptions and semantics:
-----------------------------------------------------------
a note on the legend for each instruction's documentation: 
first the instruction name/mnemonic is given, followed by a list of whitespace seperated operands/arguments, each of the form:

	A.B

where:
	A is the name of the argument position, refered to in the instruction's description.
	B is the maximum number of bits allowed for this operand. 

for example, lets take the first instruction, "zero x.64". 

for the first and only argument, A would be "x", and B would be 64. 

"zero x.64" denotes that it is named "zero", and takes a single operand/argument internally named "x", and all values (interpretted as a binary unsigned integer) which are passed into argument x for this instruction must be less than 2 to the 64, ie, they could be represented by a 64-bit binary unsigned integer.


compiletime system:
-----------------------------------------------------------



-----------------------------------------------------------
	zero x.64 
-----------------------------------------------------------
	set the variable x to 0. if the name x is not defined, 
	then x is defined as a result of this instruction. 
	if x is defined, the existing definition of variable 
	x is used. 
	always executes at compiletime.


-----------------------------------------------------------
	incr x.64
-----------------------------------------------------------
	increment the variable x by 1. 
	always executes at compiletime.


-----------------------------------------------------------
	set x.64 y.64
-----------------------------------------------------------
	assignment to destination x, using the value 
	present in source y. if the name x is not 
	defined, then x is defined as a result of this 
	instruction. if x is defined, the existing definition 
	of variable x is used. 
	always executes at compiletime.


-----------------------------------------------------------
	add x.64 y.64
-----------------------------------------------------------
	assigns the value x + y to the destination 
	variable x. 
	always executes at compiletime.


-----------------------------------------------------------
	sub x.64 y.64
-----------------------------------------------------------
	assigns the value x - y to the destination 
	variable x. 
	always executes at compiletime.


-----------------------------------------------------------
	mul x.64 y.64	
-----------------------------------------------------------
	assigns the value x * y to the destination 
	variable x. 
	always executes at compiletime.


-----------------------------------------------------------
	div x.64 y.64
-----------------------------------------------------------
	assigns the value x / y to the destination 
	variable x. 
	always executes at compiletime.


-----------------------------------------------------------
	nand x.64 y.64
-----------------------------------------------------------
	assigns the value x bitwise-nand y to the 
	destination variable x. 
	always executes at compiletime.



-----------------------------------------------------------
	nor x.64 y.64
-----------------------------------------------------------
	assigns the value x bitwise-nor y to the 
	destination variable x. 
	always executes at compiletime.


-----------------------------------------------------------
	si x.64 shift_amount.6
-----------------------------------------------------------
	shift x up by shift_amount bits, and store the 
	result into destination variable x. 
	"si x 1" should be equivalent to "mul x 2".
	always executes at compiletime.


-----------------------------------------------------------
	sd x.64 shift_amount.6
-----------------------------------------------------------
	shift x down by shift_amount bits, and 
	store the result into destination variable x. 
	"sd x 1" should be equivalent to "div x 2". 
	because all values ever are unsigned binary 
	integers, this is not an arithemtic shift, 
	but a logical shift.
	always executes at compiletime.


-----------------------------------------------------------
	ld destination.64 address.64
-----------------------------------------------------------
	load 8 bytes from source compiletime memory 
	at compiletime memory address "address" 
	into destination variable "destination". 
	this also declares x if x is not already defined. 
	always executes at compiletime.


-----------------------------------------------------------
	st address.64 source.64
-----------------------------------------------------------
	store 8 bytes from source variable "source" 
	into destination compiletime memory at 
	compiletime memory address "address". 
	always executes at compiletime.


-----------------------------------------------------------
	emit size.4 value.64
-----------------------------------------------------------
	emit "size" number of least-significant bytes 
	from variable "value" to the executable as raw 
	data, at this position in the instruction stream.
	"value" can never be a value that is unable to be
	represented by a (size * 8) bit unsigned integer.
	always executes at compiletime.



-----------------------------------------------------------
	str (string)
-----------------------------------------------------------
	emit string data from s to the final executable 
	at this position. str is equivalent to a series 
	of emit byte instructions.
	always executed at compiletime.

	the format of the (string) parameter must 
	be of the form:

		ABA

	where:
		A is any printable ASCII character of 
		  your choice, and	
		B is an arbitrary sequence of 
		  characters, not containing A.

	typically A will be chosen to be a double 
	quote character, thus calls to this look 
	reasonably familiar:

		str "your string here"


-----------------------------------------------------------
	sect x.64 
-----------------------------------------------------------
	puts the following instructions at hardware
	address x. this instruction is only 
	valid to use on embedded targets, or targets 
	which don't have address layout randomization,
	and where it makes sense to access particular 
	runtime memory addresses.
	always executes at compiletime.


-----------------------------------------------------------
	lt x.64 y.64 l.64
-----------------------------------------------------------
	if x is less than y, compiletime branch to label l. 
	this is always an unsigned comparison. 
	always executes at compiletime.

-----------------------------------------------------------
	eq x.64 y.64 l.64
-----------------------------------------------------------
	if x is equal to y, compiletime branch to label l. 
	always executes at compiletime.

-----------------------------------------------------------
	do l.64
-----------------------------------------------------------
	unconditionally branch to label l. before the 
	branch occurs, this instruction stores the 
	instruction index of this instruction 
	to address 0 in compiletime memory. 
	address 0 is also known as the compiletime 
	return address, or the link register sometimes.
	this instruction always executes at compiletime.

-----------------------------------------------------------
	at l.64
-----------------------------------------------------------
	attribute label l at this position. to perform 
	this, the instruction index of this instruction 
	in the input instruction stream is loaded 
	into the compiletime variable associated with l. 
	always executes at compiletime. 

-----------------------------------------------------------
	del x
-----------------------------------------------------------
	remove x (which can be any defined variable) 
	from the symbol table. executes at parse-time, 
	(which happens before parse time execution)
	and thus does not follow the compiletime 
	execution flow of the program. 

-----------------------------------------------------------
	file (file path)
-----------------------------------------------------------
	load the contents of the file at filepath f, 
	and parse them fully before proceeding.  
	any edits to the symbol table are 
	persistent/stateful. executes at parse-time, 
	and does not follow the execution flow of 
	the program. currently, the file path cannot
	contain strings, this might be changed soon.
	
	example calls look like:

		file library/directory/my_file_here.s

	if the same file-path is included multiple times 
	in the program, this results in an error. the user
	should arrange the dependancies and use of 
	"file" instructions to never include a file
	multiple times.




-----------------------------------------------------------
	a6_svc
-----------------------------------------------------------
	runtime system call instruction. 
	takes no arguments.


-----------------------------------------------------------
	a6_mov  Rd.5  imm.16  shift_amount.2  
		mov_type.2  is_64bit.1
-----------------------------------------------------------


		description: register immediate load.

		shift_amount == 0 means no shift, 1 means shift up by 16 bits, 
		2 means shift up by 32 bits, 3 means shift up by 64 bits. 

		mov_type == 2 means movz, which zeros all bits except 
		for the ones used by the already-shifted 16 bit immediate.

		mov_type == 0 means movn, which does the same thing as movz, 
		except for the result is inverted after doing the movz. 

		mov_type == 3 means movk, which does the same thing as movz, 
		except that it keeps all existing bits already present in the destination
		besides the ones used by the shifted immediate.
		

	a6_adc   Rd.5  Rn.5  Rm.5  should_setflags.1  
		should_subtract.1   is_64bit.1 : 

		description: add two source registers with carry flag, 
			and store into destination register.



-------------------------------------------------------------------------
	a6_adr  Rd.5 label.21  is_page_addressed.1 :
-------------------------------------------------------------------------

		description: load pc-rel address into register
		


-------------------------------------------------------------------------
	a6_addi   Rd.5  Rn.5  imm.12  should_imm_shift12.1  
		should_setflags.1  should_subtract.1  is_64bit.1 : 
-------------------------------------------------------------------------
	
		description: add source register with immediate and 
			store into destination register. 
	
		Rd/Rn == 31 means the stack pointer, instead of the zero register.




-------------------------------------------------------------------------
	a6_addr    Rd.5  Rn.5  Rm.5  imm.6   shift_type.2   
		should_setflags.1  should_subtract.1  is_64bit.1  : 
-------------------------------------------------------------------------
		
		description: add source register with optionally 
			immediate-amount-shifted source register and 
			store into destination register.

		shift_type == 0 means logical left shift, 
		shift_type == 1 means logical right shift, 
		shift_type == 2 means arithmetic right shift.
		


-------------------------------------------------------------------------
	a6_jmp   should_link.1   label.26   : 
-------------------------------------------------------------------------

		description unconditional branch to a pc-relative-offset label. 




-------------------------------------------------------------------------
	a6_bc    cond.4   label.19   : 
-------------------------------------------------------------------------

		description conditional branch based on the condition 
			and flags register state to a pc-rel label.

		cond == 15 means always false
		cond == 14 means always true

		cond == 0 means is equal (zero flag is set)
		cond == 1 means is not equal (zero flag is set)

		cond == 4 means is negative (negative flag is set)
		cond == 5 means is non-negative (negative flag is clear)

		cond == 6 means the overflow flag is set
		cond == 7 means the overflow flag is clear
		
		cond == 11 means is signed less than
		cond == 12 means is signed greater than
		cond == 13 means is signed less than or equal
		cond == 10 means is signed greater than or equal

		cond == 3 means is unsigned less than (carry set)
		cond == 8 means is unsigned greater than
		cond == 9 means is unsigned less than or equal
		cond == 2 means is unsigned greater than or equal (carry clear)

-------------------------------------------------------------------------



final remarks:
------------------------

additional reminder that the assembler is made specifically and primarily for my own use cases, and thus is not tailored for anyone else. additionally, because the assembler is still largely in development and quite drastic changes could be made quite often, is it not currently meant to be used by anyone other than me at all. as such, pull requests or feature suggestions will most likely be rejected, (unless it really knocks my socks off, then i might consider it, but it would have to be something huge that i missed, lol..)

however, that being said, i do plan to make the project publically usable by others for their own purposes, once the assembler and standard library are polished and stable enough to where i am happy with them. 
regardless, i hope you find the project interesting, or possibly learn something or find inspiration from it. thanks for reading!

dwrr


