ISA reference manual
=======================

this document describes the entire language ISA as of today, 202309015.014954, and each instructions arguments / arity. 

still a work in progress.








variables:

	programcounter
	stackpointer
	arg0
	arg1
	arg2
	arg3
	arg4
	arg5



ISA: (15 ins)

	a dis
	a anon
	a sc
	a incr
	a zero
	a b nor

	a b s1
	a b s2
	a b s4
	a b s8
	a b l1
	a b l2
	a b l4
	a b l8

	a b c blt





x	gen         <--- we don't need this!?!?!? we can just use a variable that we don't name by name again. 

	

temporary:
	debugarguments
	debugpause
	a debughex
	a debugdec




































OLD ISA:



nonruntime operations:
-----------------------------

	a del0	pop the top most argument off the argument stack. 

	a anon	make the current top of arg stack anonymous, ie, have a name of "".

	gen	make a new anonymous name, and push its index on the argument stack. 

	dup0	duplicate (ie, push to top) the top of the argument stack, unless its a macro, in which execute it. 

	dup1	duplicate the second to top of the argument stack. (does not call macro at all)

	dup2	see above, but use third to top of arg stack.

	dup3	etc. 

	dup4.	etc.

	dup5	etc.




debug operations:     (all are temporary!)
-----------------------------


	debugarguments	a function use for debugging the current state of the arguments stack in the middle of an expression. 

	debugpause     	calls getchar in the interpreter. 

	a debughex	prints out a register as hexadecimal at runtime.
	
	a debugdec 	prints out a register as decimal at runtime.




fundemental operations:
-----------------------------

	a incr		increments the register.

	a zero		sets the register to zero.



branches:
-----------------------------

	a b c blt	if b is less than a,  execution branches to label c. 

X	a b c blts	if b is less than a when a and b are both signed numbers, execution branches to label c. 

	a b c jalr	used for doing a branch and link,   as well as a register-based branch. [...still unimplemented.]



other useful ones:
-----------------------------


	a b nor		b is assigned the value a bitwise NOR'd with b. 



X	a exts		the register is sign extended to full word size.

	a dis		the registers value is marked as discarded, ie never used again. 

	a sc		the system call label a is used to perform a system call. 




arithmetic operations:
-----------------------------


X	a b c add	c is given the sum of a and b.             c = b; for a times (c++)

X	a b c sub	c is given b minus a.          					c = b + (~a + 1)

X	a b c mul	c is given the lower bits of the product of a and b.     	c = 0; for a times (c += b)

X	a b c div	c is given b divided by a.        (division algorithm here)

X	a b c rem	c is given b modulo a.            (division algorithm here)


X	a b c mh	c is given the upper bits of the product of a and b, if both a and b are unsigned.       DELETED, not useful

X	a b c mhs	c is given the upper bits of the product of a and b, if both a and b are signed.      DELETED not useful

X	a b c mhsu	c is given the upper bits of the product of a and b, if a is unsigned and b is signed.     DELETED not useful






shifts and rotates:
-----------------------------

X	a b c shl	c is given b left shifted by a bits.      		for a times, ( b = b + b )  c = b;

X	a b c shr	c is given b logically right shifted by a bits.       	for a times  ( b = b / 2 ) c = b

X	a b c shrs	c is given b arithmetically right shifted by a bits. b is signed.     DELETED, no signed numbers.







not useful enough:
------------------------



X	a b c rol	c is given b rotated left shifted by a bits.          DELETED not useful

X	a b c ror	c is given b rotated right shifted by a bits.        DELETED not useful


X	clz		undocumented          DELETED  not useful

X	ctz		undocumented          DELETED  not useful

X	csb		undocumented          DELETED  not useful




memory operations:
-----------------------------

	a b s1		store byte

	a b s2		store 2 bytes

	a b s4		store 4 bytes

	a b s8		store 8 bytes


	a b l1		load byte

	a b l2		load 2 bytes

	a b l4		load 4 bytes

	a b l8		load 8 bytes

































==============================================================
==============================================================
==============================================================
==============================================================





		final ISA:
	==========================================================



	


	a del0	pop the top most argument off the argument stack. 

	a anon	make the current top of arg stack anonymous, ie, have a name of "".

	gen	make a new anonymous name, and push its index on the argument stack. 

	dup0	duplicate (ie, push to top) the top of the argument stack, unless its a macro, in which execute it. 

	dup1	duplicate the second to top of the argument stack. (does not call macro at all)

	dup2	see above, but use third to top of arg stack.

	dup3	etc. 

	dup4.	etc.

	dup5	etc.




	a incr		increments the register.

	a zero		sets the register to zero.

	a b nor		b is assigned the value a bitwise NOR'd with b. 



	a b c blt	if b is less than a,  execution branches to label c. 

	a b c jalr	used for doing a branch and link,   as well as a register-based branch. [...still unimplemented.]


	a dis		the registers value is marked as discarded, ie never used again. 

	a sc		the system call label a is used to perform a system call. 



	a b s1		store byte

	a b s2		store 2 bytes

	a b s4		store 4 bytes

	a b s8		store 8 bytes


	a b l1		load byte

	a b l2		load 2 bytes

	a b l4		load 4 bytes

	a b l8		load 8 bytes




































declared variables:

	
	stackpointer

	arg0
	arg1
	arg2
	arg3
	arg4
	arg5



ISA:



	a sc
	a incr
	a zero
	a b nor
	a b c blt
	a b c jalr
	a b s1
	a b s2
	a b s4
	a b s8
	a b l1
	a b l2
	a b l4
	a b l8
	a dis

	a str
	a del0
	a anon
	gen
	dup0
	dup1
	dup2
	dup3
	dup4
	dup5


temporary:
	debugarguments
	debugpause
	a debughex
	a debugdec








					25 instructions total!!!              ish




								YAY


								i want it to be less than 24, for sure. that will be amazing. but 25's pretty good too. so happy about that.




















i still want to make the ISA smaller, but ill try using this one, i think, for a bit. and see if we figure something out to simplify it. 


		so yeah 
















heres the ISA im gunna implement:



	a sc
	a incr
	a zero
	a b nor
	a b c blt
	a b c jalr
	a b s1
	a b s2
	a b s4
	a b s8
	a b l1
	a b l2
	a b l4
	a b l8
	a dis
	a str
	a del0
	a anon
	gen
	dup0
	dup1
	dup2
	dup3
	dup4
	dup5
	debugarguments
	debugpause
	a debughex
	a debugdec




















