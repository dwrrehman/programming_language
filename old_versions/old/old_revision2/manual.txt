	printf(	
		"\n\t"
		"quit(q) : quit the utility.\n\t"
		"help(?) : this help menu. (abbrev = '?')\n\t"
		"file(f) : interpret a file. allows for control flow.\n\t"
		"clear(o) : clear screen. \n\t"
	
		"debugregisters debug the current state of the registers.\n\t"
		"debugctregisters : debug the current state of the compiletime registers.\n\t"
		"debugnames : debug the currently defined names.\n\t"
		"debugops : print the 4 operand registers for debug.\n\t"

		"pass : nop operation.\n\t"

		"ct_xor : compiletime xor.\n\t"
		"xor : runtime xor instruction.\n\t"

		"ct_add : compiletime add.\n\t"
		"add : runtime add instruction.\n\t"
		"addi : runtime add immediate instruction.\n\t"

		"slt : runtime set less than instruction.\n\t"
		"slti : runtime set less than immediate instruction\n\t"

		"sub : runtime sub instruction.\n\t"
		"ct_sub compiletime sub instruction.\n\t"

		"slli : runtime shift logical left immediate instruction.\n\t"
		"sll : runtime shift logical left instruction.\n\t"

		"load64 : runtime load 64-bit word instruction.\n\t"

		"blt : runtime branch less than instruction. \n\t"
		"ct_blt : compiletime branch less than instruction. \n\t"

		"print : print register value for debug\n\t"
		"ctprint : print compiletime value for debug\n\t"
		
		"11 : _[0] = _[1]; \n\t"
		"21 : _[0] = _[2]; \n\t"
		"00 : _[1] = _[0]; \n\t"
		"02 : _[1] = _[2]; \n\t"
		"000 : _[1] = _[0]; _[2] = _[0]; \n\t"
		"001 : _[2] = _[1]; _[1] = _[0]; \n\t"
		"021 : nat t1 = _[1]; _[1] = _[2]; _[2] = t1; \n\t"
		"10 : nat t0 = _[0]; _[0] = _[1]; _[1] = t0; \n\t"
		"210 : nat t0 = _[0]; _[0] = _[2]; _[2] = t0; \n\t"
		"201 : nat t2 = _[2]; _[2] = _[1]; _[1] = _[0]; _[0] = t2; \n\t"
		"120 : nat t0 = _[0]; _[0] = _[1]; _[1] = _[2]; _[2] = t0; \n\t"

		"literal16 : treat next word as a hex literal.\n\t"
		"literal10 : treat next word as a decimal literal.\n\t"
		"literal2 : treat next word as a binary literal.\n\t"

		"delete : delete the 0th virtual from the defined list of names.\n\t"

		"here : fill ct_registers[_[0]] with the PC at ct_exec. used for implementing rt branches.\n\t"
		"cthere : fill ct_registers[_[0]] with the PC at parsing. used for implementing ct branches.\n\t"

		"(hex literal) {16} : if in state base = 16\n\t"
		"(decimal literal) {10} : if in state base = 10\n\t"
		"(binary literal) {2} : if in state base = 2\n\t"

		"(register name) {0} : if not found as any other ins. will be defined if not.\n\t"

		"\n"
	);