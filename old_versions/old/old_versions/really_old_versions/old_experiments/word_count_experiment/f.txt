this program is intended to be a minimal exit program to show how the language works.
because this sentence is long enough, it functions as a comment!

the actual values we want to give to the first addi instruction are: 0 0 10. this will cause the first argument to be 0, for the exit system call. to perform the exit system call, we will use the register x17, which holds the system call number. for exit, we must put the value 1 in this register, to perform the system exit. 

to begin,  we need to obtain a nonzero value.  first, we emit a no operation,  followed by emitting an "attribute" instruction, which has the  effect of loading the value of one into the zeroth register, "array[0]". 

now, lets print the state with the compile time print state function.  its a simple call using 12 and 8.

here,  category 12  stands for "debug".


lets now enable the next instruction  to instead be compile time only.

now that we have one in the  first register, we will execute an  add  operation to put this value  into the oneth register.

lets see the result of this computation again, by calling into the  state printing function, accessed via ctstate (12 8).  


do ./run
f.txt









finally, we will give an eof,  which essentially functions as a seperator between the document's comments and code.

everything here from here on, is ignored. 

we literally could put anything here lol. 

lol

even the compile command for this document:

do ./run
f.txt


that is all.








garbage:


then, we can similarly abort the program at compile time, using the  ctabort function, which only takes 6  and the same  12  category as before.




