/*
		risc-v 64-bit cross assembler 
	     written by dwrr on 202403111.010146

	this is made to be my primary cross-platform programming language, 
	to ideally replace my use of C for programming most of my projects.
	only the risc-v target has performance guarantees. other targets
	use a translation layer to translate the risc-v ISA instructions
	into the target's ISA (eg, arm64, arm32, x86, x86_64).


todo stuff:
-----------------------------

	- implement contexts for names. 

	- add more instructions for arm64. 

	- add the load/store instructions for arm64. 


branches:
------------

	- figure out branches for the riscv arch!!!
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdint.h>
#include <stdbool.h>
#include <iso646.h>
#include <ctype.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <stdnoreturn.h>
#include <mach-o/nlist.h>
#include <mach-o/loader.h>

typedef uint64_t nat;
typedef uint32_t u32;
typedef uint16_t u16;
typedef uint8_t  u8;

static const nat ct_register_count = 1 << 16;
// static const nat ct_stack_size = 1 << 16;
//static const nat callonuse_macro_threshold = 1 << 15;
//static const nat callonuse_function_threshold = 1 << 16;

enum target_architecture { 
	noruntime, 
	riscv32, riscv64, 
	arm32, arm64, 
	x86_32, x86_64, 
	target_count 
};

static const char* target_spelling[target_count] = { 
	"noruntime", 
	"riscv32", "riscv64", 
	"arm32", "arm64", 
	"x86_32", "x86_64" 
};

enum output_formats { 
	print_binary, 
	elf_objectfile, elf_executable, 
	macho_objectfile, macho_executable, 
	output_format_count 
};
static const char* output_format_spelling[output_format_count] = { 
	"print_binary", 
	"elf_objectfile", "elf_executable", 
	"macho_objectfile", "macho_executable"
};

enum host_systems { linux, macos };

static u32 arm64_macos_abi[] = {        // note:  x9 is call-clobbered. save it before calls. 
	31,30,31,13,14,15, 7,17,
	29, 9, 0, 1, 2, 3, 4, 5,
	 6,16,19,20,21,22,23,24,
	25,26,27,28,12, 8,11,10,    
};

enum language_ISA {
	cteof, ctnop, ctstate, ctabort, ctprint, 

	rtat, ctat,
	ctpi, ctpz,
	ctmi, ctmz,
	ctl, cte,
	
	ecall, jalr, jal,
	auipc, lui, imm, 

	mul, div, rem, mulh, mulhsu, mulhu, divu, remu, 

	beq, bne, blt, bge, bltu, bgeu,
	
	add, sub, 
	sll, srl, sra, slt, sltu,   xor, and, or, 

	sb, sh, sw, sd,  
	lbu, lhu, lwu, lb, lh, lw, ld, 
	db, dh, dw, 
	isa_count
};


struct location { nat start; nat count; };

struct instruction { 
	u32 a[4];
	struct location loc[4];
	nat size;
}; 

struct file {
	struct location location;
	const char* name;
};

static nat byte_count = 0;
static u8* bytes = NULL;
static nat ins_count = 0;
static struct instruction* ins = NULL;
static struct instruction current_ins = {0};
static nat file_count = 0;
static struct file files[4096] = {0};
static char* text = NULL;
static nat text_length = 0;

static nat* array = NULL, 
	pointer = 0, skipping = 0, 
	left = 0, right = 0;

static void print_error(const char* reason, struct location spot) {
	while (spot.start < text_length and (unsigned char) text[spot.start] < 33) spot.start++;
	while (spot.count < text_length and (unsigned char) text[spot.count] < 33) spot.count++;
	nat location = 0;
	const char* filename = NULL;
	nat stack_i[4096] = {0}, stack_f[4096] = {0}, stack_o[4096] = {0};
	nat stack_count = 0;
	for (nat index = 0; index < text_length; index++) {
		for (nat f = 0; f < file_count; f++) {
			const nat start = files[f].location.start;
			//const nat count = files[f].location.count;
			if (index == start) {
				//printf("file %s begins at %llu!\n", files[f].name, index);
				stack_i[stack_count] = index;
				stack_f[stack_count] = f;
				stack_o[stack_count++] = 0;
				break;
			} 
			if (stack_o[stack_count - 1] == files[stack_f[stack_count - 1]].location.count)  {
				//print_stack(stack_i, stack_f, stack_o, stack_count);
				//printf("file %s reached the end the file! (stack_o[%llu] == count == %llu)\n", files[f].name, stack_count - 1, count);
				stack_count--;
				if (not stack_count) goto done; else break;
			}
		}
		if (index == spot.start) {
	//		printf("\033[38;5;255m(ERROR_HERE:%s:%llu)\033[0m", files[stack_f[stack_count - 1]].name, stack_o[stack_count - 1]);
			filename = files[stack_f[stack_count - 1]].name;
			location = stack_o[stack_count - 1];
			goto done;
		}
	//	printf("\033[%dm", colors[stack_count - 1]);
	//	putchar(text[index]);
	//	printf("\033[0m");
		stack_o[stack_count - 1]++;
		//printf("[%s]: incremented stack_o[top=%llu] to be now %llu...\n", files[stack_f[stack_count - 1]].name, stack_count - 1, stack_o[stack_count - 1]);
	}
done:	
	//if (debug) print_files();
	//if (debug) print_stack(stack_i, stack_f, stack_o, stack_count);
	fprintf(stderr, "\033[1masm: %s:%llu:%llu:", filename ? filename : "(top-level)", location, spot.count);
	fprintf(stderr, " \033[1;31merror:\033[m \033[1m%s\033[m\n", reason);
}

static char* read_file(const char* name, nat* out_length, struct location here) {
	int d = open(name, O_RDONLY | O_DIRECTORY);
	if (d >= 0) { close(d); errno = EISDIR; goto read_error; }
	const int file = open(name, O_RDONLY, 0);
	if (file < 0) { 
		read_error:;
		char reason[4096] = {0};
		snprintf(reason, sizeof reason, "%s: \"%s\"", strerror(errno), name);
		print_error(reason, here);
		//fprintf(stderr, "asm: \033[31;1merror:\033[0m %s: \"%s\"\n", strerror(errno), name); 
		exit(1); 
	}
	size_t length = (size_t) lseek(file, 0, SEEK_END);
	char* string = malloc(length);
	lseek(file, 0, SEEK_SET);
	read(file, string, length);
	close(file); 
	*out_length = length;
	return string;
}



static void dump_hex(uint8_t* local_bytes, nat local_byte_count) {
	printf("\ndebugging bytes bytes:\n------------------------\n");
	printf("dumping hex bytes: (%llu)\n", local_byte_count);
	for (nat i = 0; i < local_byte_count; i++) {
		if (not (i % 16)) printf("\n\t");
		if (not (i % 4)) printf(" ");
		printf("%02hhx ", local_bytes[i]);
	}
	puts("");
}

static void emit_byte(u32 x) {
	bytes = realloc(bytes, byte_count + 1);
	bytes[byte_count++] = (u8) x;
}

static void emith(u32 x) {
	bytes = realloc(bytes, byte_count + 2);
	bytes[byte_count++] = (u8) x;
	bytes[byte_count++] = (u8) (x >> 8);
}

static void emit(u32 x) {
	bytes = realloc(bytes, byte_count + 4);
	bytes[byte_count++] = (u8) x;
	bytes[byte_count++] = (u8) (x >> 8);
	bytes[byte_count++] = (u8) (x >> 16);
	bytes[byte_count++] = (u8) (x >> 24);
}

static void check(nat r, nat c, const char* type, nat arg_index) {
	if (r < c) return;
	char reason[4096] = {0};
	snprintf(reason, sizeof reason, "argument %llu: invalid %s, %llu (%llu >= %llu)", arg_index, type, r, r, c);
	print_error(reason, current_ins.loc[arg_index + 1]); 
	exit(1);
}

////////////////// riscv backend //////////////

static u32 r_type(u32* a, u32 o, u32 f, u32 g) {   //  r r r op
	check(a[0], 32, "register", 0);
	check(a[1], 32, "register", 1);
	check(a[2], 32, "register", 2);
	return (g << 25U) | (a[2] << 20U) | (a[1] << 15U) | (f << 12U) | (a[0] << 7U) | o;
}

static u32 i_type(u32* a, u32 o, u32 f) {   //  i r r op
	check(a[0], 32, "register", 0);
	check(a[1], 32, "register", 1);
	check(a[2], 1 << 12, "immediate", 2);
	return (a[2] << 20U) | (a[1] << 15U) | (f << 12U) | (a[0] << 7U) | o;
}

static u32 s_type(u32* a, u32 o, u32 f) {   //  i r r op
	check(a[0], 32, "register", 0);
	check(a[1], 32, "register", 1);
	check(a[2], 1 << 12, "immediate", 2);
	return ((a[0] >> 5U) << 25U) | (a[2] << 20U) | (a[1] << 15U) | (f << 12U) | ((a[0] & 0x1F) << 7U) | o;
}

static u32 u_type(u32* a, u32 o) {   	//  i r op
	check(a[0], 32, "register", 0);
	check(a[1], 1 << 20, "immediate", 1);
	return (a[1] << 12U) | (a[0] << 7U) | o;
}

static u32 calculate_offset(nat here, nat label) {
	u32 offset = 0;
	if (label < here) {
		for (nat i = label; i < here; i++) {
			offset -= ins[i].size;
		}
	} else {
		for (nat i = here; i < label; i++) {
			offset += ins[i].size;
		}
	}
	return offset;
}

static u32 j_type(nat here, u32* a, u32 o) {   	//  L r op
	check(a[0], 32, "register", 0);
	const u32 e = calculate_offset(here, a[1]);
	const u32 imm19_12 = (e & 0x000FF000);
	const u32 imm11    = (e & 0x00000800) << 9;
	const u32 imm10_1  = (e & 0x000007FE) << 20;
	const u32 imm20    = (e & 0x00100000) << 11;
	const u32 imm = imm20 | imm10_1 | imm11 | imm19_12;
	return (imm << 12U) | (a[0] << 7U) | o;
}

static u32 b_type( nat here,  u32* a, u32 o, u32 f) {   //  L r r op
	if (here or a)
		return f + o;
	else return 0;

	//	check(a[0], 32, "register");
	//	check(a[1], 32, "register");
	//const u32 e = calculate_offset(here, a[2]);
	//const u32 imm19_12 = (e & 0x000FF000);
	//const u32 imm11    = (e & 0x00000800) << 9;
	//const u32 imm10_1  = (e & 0x000007FE) << 20;
	//const u32 imm20    = (e & 0x00100000) << 11;
	//const u32 imm = imm20 | imm10_1 | imm11 | imm19_12;
	//return (imm << 12U) | (a[0] << 7U) | o;
	//return (a[1] << 12U) | (a[0] << 7U) | o;
}

/*
static u16 cr_type(u32* a, u16 o, u32 f, u32 g) {
	check(a[0], 32, "register");
	check(a[1], 32, "register");
	check(a[2], 32, "register");
	return (u16) ((g << 25U) | (a[2] << 20U) | (a[1] << 15U) | (f << 12U) | (a[0] << 7U) | o);
}
static u32 ci_type(u32* a, u32 o, u32 f, u32 g) { return 0; }
static u32 css_type(u32* a, u32 o, u32 f, u32 g) { return 0; }
static u32 ciw_type(u32* a, u32 o, u32 f, u32 g) { return 0; }
static u32 cl_type(u32* a, u32 o, u32 f, u32 g) { return 0; } 
static u32 cs_type(u32* a, u32 o, u32 f, u32 g) { return 0; } 
static u32 cb_type(u32* a, u32 o, u32 f, u32 g) { return 0; } 
static u32 cj_type(u32* a, u32 o, u32 f, u32 g) { return 0; } 
*/

static void generate_riscv_machine_code(void) {
	for (nat i = 0; i < ins_count; i++) {
		current_ins = ins[i];
		nat op = ins[i].a[0];
		u32* a = ins[i].a + 1;

		     if (op == db)	emit_byte(a[0]);
		else if (op == dh)	emith(a[0]);
		else if (op == dw)	emit(a[0]);
		else if (op == ecall)   emit(0x00000073);
		else if (op == ebreak)  emit(0x00100073);
		else if (op == fence)   emit(0x0000000F); // todo: not implemented fully. 
		else if (op == fencei)  emit(0x0000200F);

		else if (op == add)     emit(r_type(a, 0x33, 0x0, 0x00));
		else if (op == sub)     emit(r_type(a, 0x33, 0x0, 0x20));
		else if (op == sll)     emit(r_type(a, 0x33, 0x1, 0x00));
		else if (op == slt)     emit(r_type(a, 0x33, 0x2, 0x00));
		else if (op == sltu)    emit(r_type(a, 0x33, 0x3, 0x00));
		else if (op == xor_)    emit(r_type(a, 0x33, 0x4, 0x00));
		else if (op == srl)     emit(r_type(a, 0x33, 0x5, 0x00));
		else if (op == sra)     emit(r_type(a, 0x33, 0x5, 0x20));
		else if (op == or_)     emit(r_type(a, 0x33, 0x6, 0x00));
		else if (op == and_)    emit(r_type(a, 0x33, 0x7, 0x00));
		else if (op == addw)    emit(r_type(a, 0x3B, 0x0, 0x00));
		else if (op == subw)    emit(r_type(a, 0x3B, 0x0, 0x20));
		else if (op == sllw)    emit(r_type(a, 0x3B, 0x1, 0x00));
		else if (op == srlw)    emit(r_type(a, 0x3B, 0x5, 0x00));
		else if (op == sraw)    emit(r_type(a, 0x3B, 0x5, 0x20));

		else if (op == lb)      emit(i_type(a, 0x03, 0x0));
		else if (op == lh)      emit(i_type(a, 0x03, 0x1));
		else if (op == lw)      emit(i_type(a, 0x03, 0x2));
		else if (op == ld)      emit(i_type(a, 0x03, 0x3));
		else if (op == lbu)     emit(i_type(a, 0x03, 0x4));
		else if (op == lhu)     emit(i_type(a, 0x03, 0x5));
		else if (op == lwu)     emit(i_type(a, 0x03, 0x6));
		else if (op == addi)    emit(i_type(a, 0x13, 0x0));
		else if (op == slti)    emit(i_type(a, 0x13, 0x2));
		else if (op == sltiu)   emit(i_type(a, 0x13, 0x3));
		else if (op == xori)    emit(i_type(a, 0x13, 0x4));
		else if (op == ori)     emit(i_type(a, 0x13, 0x6));
		else if (op == andi)    emit(i_type(a, 0x13, 0x7));
		else if (op == slli)    emit(i_type(a, 0x13, 0x1));

		else if (op == srli)    emit(i_type(a, 0x13, 0x5));   

			// TODO: make this not use the immediate as a bit in the opcode. 
			// toggle this bit if the user gives a sraiw/srai.  comment 
			// version old:(for srai/sraiw, give the appropriate a[2] with imm[10] set.)

		else if (op == addiw)   emit(i_type(a, 0x1B, 0x0));
		else if (op == slliw)   emit(i_type(a, 0x1B, 0x1));
		else if (op == srliw)   emit(i_type(a, 0x1B, 0x5));
		else if (op == jalr)    emit(i_type(a, 0x67, 0x0));

		else if (op == sb)      emit(s_type(a, 0x23, 0x0));
		else if (op == sh)      emit(s_type(a, 0x23, 0x1));
		else if (op == sw)      emit(s_type(a, 0x23, 0x2));
		else if (op == sd)      emit(s_type(a, 0x23, 0x3));

		else if (op == lui)     emit(u_type(a, 0x37));
		else if (op == auipc)   emit(u_type(a, 0x17));
		
		else if (op == beq)     emit(b_type(i, a, 0x63, 0x0));  // TODO: do these properly. 
		else if (op == bne)     emit(b_type(i, a, 0x63, 0x1));
		else if (op == blt)     emit(b_type(i, a, 0x63, 0x4));
		else if (op == bge)     emit(b_type(i, a, 0x63, 0x5));
		else if (op == bltu)    emit(b_type(i, a, 0x63, 0x6));
		else if (op == bgeu)    emit(b_type(i, a, 0x63, 0x7));

		else if (op == jal)     emit(j_type(i, a, 0x6F));

		//else if (op == cnop emith(0);  // TODO: finish C extension implementation. 
		//else if (op == caddi4spn) emith(ci_type(a, ));   
		else {
			printf("error: riscv: unknown runtime instruction: %s : %llu\n", spelling[op], op);
			print_error("unknown instruction", current_ins.loc[0]);
			abort();
		}
	}
}

/////////////////////////////////////////////////

static u32 generate_adr(u32* a, u32 op, nat im, u32 oc) {   //      adrp: oc = 1 

	u32 Rd = (u32) a[0];
	u32 Im = * (u32*) im;

	check(Rd, 32, "register", 0);
	//check_branch((int) Im, 1 << (21 - 1), a[1], "pc-relative address");
	u32 lo = 0x03U & Im, hi = 0x07FFFFU & (Im >> 2);

	return  (oc << 31U) | 
		(lo << 29U) | 
		(op << 24U) |
		(hi <<  5U) | Rd;
}

//     im Rd mov     movz: oc = 2   movk: oc = 3   movn: oc = 0    // lui
static u32 generate_mov(u32 Rd, u32 op, u32 im, u32 sf, u32 oc, u32 sh) {  

	check(Rd, 32, "register", 0);

	Rd = arm64_macos_abi[Rd];

	check(im, 1 << 12U, "immediate", 1);
	return  (sf << 31U) | 
		(oc << 29U) | 
		(op << 23U) | 
		(sh << 21U) | 
		(im <<  5U) | Rd;
}

// im Rn Rd addi    // addi
static u32 generate_addi(u32 Rd, u32 Rn, u32 im, u32 op, u32 sf, u32 sb, u32 st, u32 sh) {  
	if (not Rd) return 0xD503201F;
	if (not Rn) return generate_mov(Rd, 0x25U, im, sf, 2, 0);
	
	check(Rd, 32, "register", 0);
	check(Rn, 32, "register", 1);

	Rd = arm64_macos_abi[Rd];
	Rn = arm64_macos_abi[Rn];

	check(im, 1 << 12U, "immediate", 2);

	return  (sf << 31U) | 
		(sb << 30U) | 
		(st << 29U) | 
		(op << 23U) | 
		(sh << 22U) | 
		(im << 10U) | 
		(Rn <<  5U) | Rd;
}

static u32 generate_memi(u32 Rt, u32 Rn, u32 im, u32 oe, u32 op, u32 oc, u32 sf) {     
	
	check(Rt, 32, "register", 0);
	check(Rn, 32, "register", 1);

	Rt = arm64_macos_abi[Rt];
	Rn = arm64_macos_abi[Rn];

	check(im, 1 << 9U, "immediate", 2);

	return  (sf << 30U) |
		(op << 24U) |
		(oc << 22U) |
		(im << 12U) |
		(oe << 10U) |
		(Rn <<  5U) | Rt;
}

static u32 generate_memiu(u32 Rt, u32 Rn, u32 im, u32 op, u32 oc, u32 sf) {

	check(Rt, 32, "register", 0);
	check(Rn, 32, "register", 1);

	Rt = arm64_macos_abi[Rt];
	Rn = arm64_macos_abi[Rn];

	check(im, 1 << 12U, "immediate", 2);

	return  (sf << 30U) | 
		(op << 24U) | 
		(oc << 22U) | 
		(im << 10U) | 
		(Rn <<  5U) | Rt;
}

//  Rm Rn Rd or/add         "add (shifted register)"

//      sh: 3 bits  shift type. 000=lsl, 010=lsr, 100=asr, 
// 	sb: 1 bit   subtraction mode.
// 	sf: 1 bit   32 or 64 bit
//	st: 1 bit   set condition flags
//	im: 6 bits  6 bit immediate for left shifting. 

static u32 generate_add(u32 Rd, u32 Rn, u32 Rm, u32 op, u32 im, u32 sf, u32 st, u32 sb, u32 sh) {

	check(Rd, 32, "register", 0);
	check(Rn, 32, "register", 1);
	check(Rm, 32, "register", 2);
	check(im, 32U << sf, "immediate", 3);

	Rd = arm64_macos_abi[Rd];
	Rn = arm64_macos_abi[Rn];
	Rm = arm64_macos_abi[Rm];

	return  (sf << 31U) |
		(sb << 30U) |
		(st << 29U) |
		(op << 24U) | 
		(sh << 21U) | 
		(Rm << 16U) | 
		(im << 10U) | 
		(Rn <<  5U) | Rd;
}

static u32 generate_br(void) { 
// 	u32 Rn, u32 im, u32 op, u32 oc
//	if (oc >= 2) print_error("jalr: only zr and ra are supported for", current_ins.loc[0]);
//	if (im) print_error("jalr: nonzero immediate not supported for jalr", current_ins.loc[0]);
//	Rn = arm64_macos_abi[Rn];
//	check(Rn, 32, "register", 0);
//	return (oc << 21U) | (op << 10U) | (Rn << 5U);

	return 0;
}

static u32 generate_b(void) {
//           bl: oc = 1
//	u32* a, nat im, u32 oc
//	const u32 e = calculate_offset(here, a[2]);
//	u32 Im = * (u32*) a[0];
//	check_branch((int) Im, 1 << (26 - 1), a[0], "branch offset");
//	return (oc << 31U) | (0x05 << 26U) | (0x03FFFFFFU & im);
	
	return 0;
}

static u32 generate_bc(u32 condition, nat here, nat target) { 

	printf("target = %llu, here = %llu\n", target, here);
	getchar();
	const u32 byte_offset = calculate_offset(here, target) - 4;
	const u32 imm = byte_offset >> 2;
	return (0x54U << 24U) | ((0x0007FFFFU & imm) << 5U) | condition;
}

static void emit_and_generate_branch(u32 R_left, u32 R_right, nat target, nat here, u32 condition) {
	emit(generate_add(0, R_left, R_right, 0x0BU, 0, 1, 1, 1, 0));
	emit(generate_bc(condition, here, array[target]));
}

static void generate_arm64_machine_code(void) {

	// risv version: use this one as a template for the op==opcode's, but with 
	//  the above arm instruction encoding functions.., 
	// with the apropriote arguments hardcoded to get the right semantics. 

	for (nat i = 0; i < ins_count; i++) {
		current_ins = ins[i];
		nat op = ins[i].a[0];
		u32* a = ins[i].a + 1;

		     if (op == db)	emit_byte(a[0]);
		else if (op == dh)	emith(a[0]);
		else if (op == dw)	emit(a[0]);
		else if (op == ecall)   emit(0xD4000001);

		else if (op == add)    emit(generate_add(a[0], a[1], a[2], 0x0BU, 0, 1, 0, 0, 0));
		else if (op == sub)    emit(generate_add(a[0], a[1], a[2], 0x0BU, 0, 1, 0, 1, 0));
		else if (op == addw)   emit(generate_add(a[0], a[1], a[2], 0x0BU, 0, 0, 0, 0, 0));
		else if (op == subw)   emit(generate_add(a[0], a[1], a[2], 0x0BU, 0, 0, 0, 1, 0));
		else if (op == or_)    emit(generate_add(a[0], a[1], a[2], 0x2AU, 0, 1, 0, 0, 0));

		else if (op == addi)   emit(generate_addi(a[0], a[1], a[2], 0x22U, 1, 0, 0, 0));
		else if (op == addiw)  emit(generate_addi(a[0], a[1], a[2], 0x22U, 0, 0, 0, 0));

		else if (op == bltu)   emit_and_generate_branch(a[0], a[1], a[2], i, 3);
		else if (op == bgeu)   emit_and_generate_branch(a[0], a[1], a[2], i, 2);

		else if (op == sll)    goto here; 
		else if (op == slt)    goto here;
		else if (op == sltu)   goto here;
		else if (op == xor_)   goto here;
		else if (op == srl)    goto here;
		else if (op == sra)    goto here;
		else if (op == and_)   goto here;
		else if (op == sllw)   goto here;
		else if (op == srlw)   goto here;
		else if (op == sraw)   goto here;

		else if (op == lb)     emit(generate_memiu(a[0], a[1], a[2], 0x00, 0x00, 0));
		else if (op == lh)     emit(generate_memiu(a[0], a[1], a[2], 0x00, 0x00, 0));
		else if (op == lw)     emit(generate_memiu(a[0], a[1], a[2], 0x00, 0x00, 0));
		else if (op == ld)     emit(generate_memiu(a[0], a[1], a[2], 0x00, 0x00, 0));
		else if (op == lbu)    emit(generate_memiu(a[0], a[1], a[2], 0x00, 0x00, 0));
		else if (op == lhu)    emit(generate_memiu(a[0], a[1], a[2], 0x00, 0x00, 0));
		else if (op == lwu)    emit(generate_memiu(a[0], a[1], a[2], 0x00, 0x00, 0));

		else if (op == sb)     emit(generate_memiu(a[0], a[1], a[2], 0x00, 0x00, 0));
		else if (op == sh)     emit(generate_memiu(a[0], a[1], a[2], 0x00, 0x00, 0));
		else if (op == sw)     emit(generate_memiu(a[0], a[1], a[2], 0x00, 0x00, 0));
		else if (op == sd)     emit(generate_memiu(a[0], a[1], a[2], 0x00, 0x00, 0));

		else if (op == slti)   goto here;
		else if (op == sltiu)  goto here;
		else if (op == xori)   goto here;
		else if (op == ori)    goto here;
		else if (op == andi)   goto here;
		else if (op == slli)   goto here;
		else if (op == srli)   goto here;
		else if (op == slliw)  goto here;
		else if (op == srliw)  goto here;
		else if (op == jalr)   goto here;
		
		else if (op == lui)    goto here;
		else if (op == auipc)  goto here;
		else if (op == beq)    goto here;
		else if (op == bne)    goto here;
		else if (op == blt)    goto here;
		else if (op == bge)    goto here;
		else if (op == jal)    goto here;
		else {
			here: printf("error: arm64: unknown runtime instruction: %s : %llu\n", spelling[op], op);
			print_error("unknown instruction", current_ins.loc[0]);
			abort();
		}
	}
}


static noreturn void make_elf_object_file(const char* object_filename) {
	puts("make_elf_object_file: unimplemented");
	abort();
//   system("objdump program.out -DSast --disassembler-options=no-aliases");    // eventually, we'll use objdump and  readelf   to debug the output. 
//   system "readelf program.out");
/*		
	const int flags = O_WRONLY | O_CREAT | O_TRUNC | O_EXCL;
	const mode_t mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH;
	const int file = open(argv[3], flags, mode);
	if (file < 0) { perror("obj:open"); exit(1); }
	write(file, NULL, 0);
	write(file, NULL, 0);
	write(file, NULL, 0);
	close(file);
*/
}

static void make_macho_object_file(const char* object_filename, const bool preserve_existing_object) {

	struct mach_header_64 header = {0};
	header.magic = MH_MAGIC_64;
	header.cputype = (int)CPU_TYPE_ARM | (int)CPU_ARCH_ABI64;
	header.cpusubtype = (int) CPU_SUBTYPE_ARM64_ALL;
	header.filetype = MH_OBJECT;
	header.ncmds = 2;
	header.sizeofcmds = 0;
	header.flags = MH_NOUNDEFS | MH_SUBSECTIONS_VIA_SYMBOLS;

	header.sizeofcmds = 	sizeof(struct segment_command_64) + 
				sizeof(struct section_64) + 
				sizeof(struct symtab_command);

	struct segment_command_64 segment = {0};
	strncpy(segment.segname, "__TEXT", 16);
	segment.cmd = LC_SEGMENT_64;
	segment.cmdsize = sizeof(struct segment_command_64) + sizeof(struct section_64);
	segment.maxprot =  (VM_PROT_READ | VM_PROT_EXECUTE);
	segment.initprot = (VM_PROT_READ | VM_PROT_EXECUTE);
	segment.nsects = 1;
	segment.vmaddr = 0;
	segment.vmsize = byte_count;
	segment.filesize = byte_count;

	segment.fileoff = 	sizeof(struct mach_header_64) + 
				sizeof(struct segment_command_64) + 
				sizeof(struct section_64) + 
				sizeof(struct symtab_command);

	struct section_64 section = {0};
	strncpy(section.sectname, "__text", 16);
	strncpy(section.segname, "__TEXT", 16);
	section.addr = 0;
	section.size = byte_count;	
	section.align = 3;
	section.reloff = 0;
	section.nreloc = 0;
	section.flags = S_ATTR_PURE_INSTRUCTIONS | S_ATTR_PURE_INSTRUCTIONS;

	section.offset = 	sizeof(struct mach_header_64) + 
				sizeof(struct segment_command_64) + 
				sizeof(struct section_64) + 
				sizeof(struct symtab_command);

	const char strings[] = "\0_start\0";

	struct symtab_command table  = {0};
	table.cmd = LC_SYMTAB;
	table.cmdsize = sizeof(struct symtab_command);
	table.strsize = sizeof(strings);
	table.nsyms = 1; 
	table.stroff = 0;
	
	table.symoff = (uint32_t) (
				sizeof(struct mach_header_64) +
				sizeof(struct segment_command_64) + 
				sizeof(struct section_64) + 
				sizeof(struct symtab_command) + 
				byte_count
			);

	table.stroff = table.symoff + sizeof(struct nlist_64);

	struct nlist_64 symbols[] = {
	        (struct nlist_64) {
	            .n_un.n_strx = 1,
	            .n_type = N_SECT | N_EXT,
	            .n_sect = 1,
	            .n_desc = REFERENCE_FLAG_DEFINED,
	            .n_value = 0,
	        }
	};

	if (preserve_existing_object and not access(object_filename, F_OK)) {
		puts("asm: object_file: file exists"); 
		puts(object_filename);
		exit(1);
	}

	const int flags = O_WRONLY | O_CREAT | O_TRUNC | (preserve_existing_object ? O_EXCL : 0);
	const mode_t mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH;
	const int file = open(object_filename, flags, mode);
	if (file < 0) { perror("obj:open"); exit(1); }

	write(file, &header, sizeof(struct mach_header_64));
	write(file, &segment, sizeof (struct segment_command_64));
	write(file, &section, sizeof(struct section_64));
	write(file, &table, sizeof table);
	write(file, bytes, byte_count);
	write(file, symbols, sizeof(struct nlist_64));
	write(file, strings, sizeof strings);
	close(file);
}

static bool execute(nat op, nat* index) {

	printf("\033[32mcalling op = %llu "
		"(\"%s\")\033[0m...\n", 
		op, spelling[op]);

	if (op == cteof) return 1;
	else if (skipping) return 0;
	else if (op == ctabort) abort();

	else if (op == ctprint) {
		printf("debug: \033[32m%llu "
			"(%lld)\033[0m "
			"\033[32m0x%llx\033[0m\n", 
			array[pointer], 
			array[pointer],
			array[pointer]
		);
		if (left < text_length and right < text_length) {
			printf("string: \"%.*s\"\n", (int) (right - left), text + left);
		} else puts("string: [error: out of bounds]");
	}

	else if (op == ctstate) {
		printf("state info: skipping = %llu"
			"\n\tpointer = %llu"
			"\n\tleft = %llu"
			"\n\tright = %llu"
			"\n\tarray = {", 
			skipping, pointer, 
			left, right
		);
		for (nat i = 0; i < 20; i++) {
			printf("%llx(%lld), ", array[i], array[i]);
		}
		printf("}\n\n");
	} 

	else if (op == rtat) {
		array[pointer] = ins_count;
		if (skipping == pointer) skipping = 0;
	}
	else if (op == ctat) {
		array[pointer] = *index;
		if (skipping == pointer) skipping = 0;
	}

	else if (op == ctpi) pointer++;
	else if (op == ctpz) pointer = 0;
	else if (op == ctps) pointer <<= 1;
	else if (op == ctpd) pointer--;
	else if (op == ctpl) pointer = left;

	else if (op == ctmi) array[pointer]++;
	else if (op == ctmz) array[pointer] = 0;
	else if (op == ctms) array[pointer] <<= 1;
	else if (op == ctmd) array[pointer]--;
	else if (op == ctml) array[pointer] = left;

	else if (op == ctlm)  left = array[pointer];
	else if (op == ctrm)  right = array[pointer];
	else if (op == ctlp)  left = pointer;
	else if (op == ctadd) left += array[pointer];
	else if (op == ctmul) left *= array[pointer];
	else if (op == ctnor) left = ~(left | array[pointer]);

	else if (op == ctl) { 
		if (left < right) {
			if (array[pointer]) *index = array[pointer];
			else skipping = pointer; 
		}
	}

	else if (op == cte) { 
		if (left == right) {
			if (array[pointer]) *index = array[pointer];
			else skipping = pointer; 
		}
	}

	else goto push;
	return 0;

push:	printf("pushing runtime instruction: %llu(\"%s\").\n", op, spelling[op]);
	struct instruction new = {0};
	new.a[0] = (u32) op;
	new.loc[0] = (struct location) {0};
	for (nat i = 1; i < 4; i++) {
		new.a[i] = (u32) array[pointer - (i - 1)];
		printf("found argument #%llu : u32 = %u\n", i, new.a[i]);
	}

	if (op == bltu or op == bgeu) new.size = 8;     // todo: lookup the size for the ins in a table, based on the target.
	else new.size = 4;

	ins = realloc(ins, sizeof(struct instruction) * (ins_count + 1));
	ins[ins_count++] = new;
	return 0;
}

int main(int argc, const char** argv) {

	if (argc != 2) exit(puts("asm: \033[31;1merror:\033[0m usage: ./asm <source.s>"));

	const char* filename = argv[1];
	text_length = 0;
	text = read_file(filename, &text_length, (struct location){0});
	array = calloc(ct_register_count, sizeof(nat));

	files[file_count].name = filename;
	files[file_count++].location = (struct location) {.start = 0, .count = text_length};

	{ nat index = 0, at = 0, save = 0, op = 0, max = 0;
begin:	if (op >= isa_count) goto error;
	if (at == strlen(spelling[op])) goto found;
	if (index >= text_length) goto done;
	if ((unsigned char) text[index] < 33) goto nextc;
	if (spelling[op][at] != text[index]) goto fail;
	at++; goto nextc; found: if (execute(op, &index)) goto done;
	save = index; op = 0; at = 0; goto begin;
fail: 	op++; index = save; at = 0; goto begin;
nextc:	index++; if (index > max) max = index; goto begin; 
error:	print_error("unresolved symbol", (struct location){save, max}); exit(1); }

done:;	const nat architecture = (*array >> 0) & 0xF;
	const nat output_format = (*array >> 4) & 0xF;
	const bool debug = (*array >> 8) & 0x1;
	const bool preserve_existing_object = (*array >> 9) & 0x1;
	const bool preserve_existing_executable = (*array >> 10) & 0x1;
	
	const char* object_filename = "object0.o";
	const char* executable_filename = "executable0.out";

	if (debug) {
		printf("info: building for target:\n\tarchitecture:  "
			"\033[31;1m%s\033[0m\n\toutput_format: \033[32;1m%s\033[0m.\n\n", 
			target_spelling[architecture  % target_count], 
			output_format_spelling[output_format % output_format_count]
		);
	}

	if (architecture == noruntime) {
		if (not ins_count) exit(0);
		current_ins = ins[0];
		print_error("encountered runtime instruction with target \"noruntime\"", ins[0].loc[0]);
		exit(1);

	} else if (architecture == riscv32 or architecture == riscv64) {
		generate_riscv_machine_code();

	} else if (architecture == arm64) {
		generate_arm64_machine_code();

	} else {
		puts("asm: \033[31;1merror:\033[0m unknown target architecture specified, valid values: "); // TODO: use print_error();
		for (nat i = 0; i < target_count; i++) {
			printf("\t%llu : %s\n", i, target_spelling[i]);
		}
		exit(1);
	}

	if (output_format == print_binary) 
		dump_hex((uint8_t*) bytes, byte_count);

	else if (output_format == elf_objectfile or output_format == elf_executable)
		make_elf_object_file(object_filename);

	else if (output_format == macho_objectfile or output_format == macho_executable) 
		make_macho_object_file(object_filename, preserve_existing_object);
	else {
		puts("asm: \033[31;1merror:\033[0m unknown output format specified, valid values: "); // TODO: use print_error();
		for (nat i = 0; i < output_format_count; i++) {
			printf("\t%llu : %s\n", i, output_format_spelling[i]);
		}
	}

	if (output_format == elf_executable or output_format == macho_executable) {

		if (preserve_existing_executable and not access(executable_filename, F_OK)) {
			puts("asm: executable_file: file exists");  // TODO: use print_error();
			puts(executable_filename);
			exit(1);
		}
		
		char link_command[4096] = {0};
		snprintf(link_command, sizeof link_command, "ld -S -x " //  -v
			"-dead_strip "
			"-no_weak_imports "
			"-fatal_warnings "
			"-no_eh_labels "
			"-warn_compact_unwind "
			"-warn_unused_dylibs "
			"%s -o %s "
			"-arch arm64 "
			"-e _start "
			"-stack_size 0x1000000 "
			"-platform_version macos 13.0.0 13.3 "
			"-lSystem "
			"-syslibroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk ", 
			object_filename, executable_filename
		);
		system(link_command);
	}

	if (debug) {
		system("otool -txvVhlL object0.o");
		system("otool -txvVhlL executable0.out");
		system("objdump object0.o -DSast --disassembler-options=no-aliases");
		system("objdump executable0.out -DSast --disassembler-options=no-aliases");
	}
}





