
comment
	forwards branches dont work!  i actually dont even know how to fix them either...

		it turns out, we need to do the branch reloff calc at the label!!! which is totally stupid. why do we? becauseeeeee we need to know the actual value of the forwards label, AT CT
			before we CT-interprettt the subtract and decr CT-instructions. 

			which perform the addr reloff calc. 


	
			so yeah. thats the problem.


					i dont know how to solve it. 

	
	
				i think we just need to have the      "at"     or     "here"

						or      "now here"       instructions


							parsed wayyyyy earlier. 



						like, before anything else. 


						basically. which is kinda stupid. 


	
				
endcomment








zero 000 xor now xor


	transfer define 
		zero swap1 001 021 addi 
	endmacro


one literal 21 
	transfer

random1 literal a1999999  
	transfer


random2 literal a2999999  
	transfer


random3 literal a3999999  
	transfer


random4 literal a4999999  
	transfer


random5 literal a5999999  
	transfer




comment ------------------------------------ endcomment

	at define 
		now here 
	endmacro

	ctdecr define use literal 21 swap1 001 now sub endmacro

	goto define 
		zero zero beq
	endmacro 

	# define literal endmacro
	rt define transfer endmacro

	setzero define
		000 xor
	endmacro

	incr define 
		use literal 21 
		swap1 001 addi 
	endmacro

	
	decr define 
		use literal gffffffffffffffff 
		swap1 001 addi 
	endmacro

	set define 
		zero swap1 add
	endmacro




	floop define 
		iteration_count set
		i setzero

		use save0 at
			use save1 i iteration_count beq
			_
			i incr
			give0 goto
		give1 at
			literalmacro _ undefine now kill kill
			iteration_count undefine now kill kill
			i undefine now kill kill	
	endmacro



	bloop define 
		i set
		2loop at
			2exit i zero beq
			i decr
			_
			2loop goto
		2exit at
			literalmacro _ undefine now kill kill
			i undefine now kill kill	
	endmacro



	comment     bug:   we are forced to have the labels all be unique. we shouldnt need to do that?... idk... hmm..
			    we should be able to undefine a label? 
				wait now, how would that work? hmmmmmm
					if we actually want the programmer to be able to branch to anywhere...
					we never undefine labels. thats interesting. hmm..

	endcomment

comment -------------first ever loop!---------------- endcomment 

	count # a01 rt
	
	sum setzero

	_ define
		i sum sum add print  
	endmacro count bloop

	random1 print

	sum1 setzero

	_ define  
		i sum1 sum1 add print  
	endmacro count floop

	random1 print

	sum1 setzero

	_ define  
		i sum1 sum1 add print  
	endmacro count floop

	random1 print

	sum print
	sum1 print	

	debughalt



comment -------- macros ----------- endcomment








