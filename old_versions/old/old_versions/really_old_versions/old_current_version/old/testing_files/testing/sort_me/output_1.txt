this assembler is currently a work in progress, backend is currently not fully implemented yet...
info: now processing file: scopetest.s...
defining a new name:
library/foundation
including file library/foundation...
info: now processing file: library/foundation...
defining a new name:
library/constants
including file library/constants...
info: now processing file: library/constants...
defining a new name:
0
defining a new name:
1
defining a new name:
2
defining a new name:
3
defining a new name:
4
defining a new name:
5
processing next file in the stack...
info: now processing file: library/foundation...
EXECUTING DEF!!!
square
executing ar....
executing ret....
EXECUTING DEF!!!
double
executing ar....
executing ret....
EXECUTING DEF!!!
addone
executing ar....
executing ret....
EXECUTING DEF!!!
settozero_ifequal
executing ar....
executing ar....
executing ar....
defining a new name:
done
executing ret....
EXECUTING DEF!!!
debug_number
executing ar....
executing ret....
processing next file in the stack...
info: now processing file: scopetest.s...
EXECUTING DEF!!!
print
executing ar....
executing ret....
EXECUTING DEF!!!
s
defining a new name:
x
defining a new name:
y
executing ret....
processing_file: finished last file.
dictionary: (58 count)
    0: .name =                   (), .value =     0
    1: .name =                 zero, .value =     1
    2: .name =                 incr, .value =     2
    3: .name =                 decr, .value =     3
    4: .name =                  set, .value =     4
    5: .name =                  add, .value =     5
    6: .name =                  sub, .value =     6
    7: .name =                  mul, .value =     7
    8: .name =                  div, .value =     8
    9: .name =                  rem, .value =     9
   10: .name =                   si, .value =    10
   11: .name =                   sd, .value =    11
   12: .name =                  and, .value =    12
   13: .name =                   or, .value =    13
   14: .name =                  eor, .value =    14
   15: .name =                  not, .value =    15
   16: .name =                   lt, .value =    16
   17: .name =                   ge, .value =    17
   18: .name =                  lts, .value =    18
   19: .name =                  ges, .value =    19
   20: .name =                   ne, .value =    20
   21: .name =                   eq, .value =    21
   22: .name =                  env, .value =    22
   23: .name =                   at, .value =    23
   24: .name =                  def, .value =    24
   25: .name =                  ret, .value =    25
   26: .name =                   ar, .value =    26
   27: .name =                   lf, .value =    27
   28: .name =                 (nv), .value =     0
   29: .name =            undefined, .value =     0
   30: .name =         stackpointer, .value =     0
   31: .name =            stacksize, .value =     0
   32: .name =   library/foundation, .value =     0
   33: .name =    library/constants, .value =     0
   34: .name =                    0, .value =     0
   35: .name =                    1, .value =     0
   36: .name =                    2, .value =     0
   37: .name =                    3, .value =     0
   38: .name =                    4, .value =     0
   39: .name =                    5, .value =     0
   40: .name =               square, .value =    28
   41: .name =                    x, .value =     0
   42: .name =               double, .value =    29
   43: .name =                    x, .value =     0
   44: .name =               addone, .value =    30
   45: .name =                    x, .value =     0
   46: .name =    settozero_ifequal, .value =    31
   47: .name =                    x, .value =     0
   48: .name =                    a, .value =     0
   49: .name =                    b, .value =     0
   50: .name =                 done, .value =     0
   51: .name =         debug_number, .value =    32
   52: .name =                    i, .value =     0
   53: .name =                print, .value =    33
   54: .name =                    x, .value =     0
   55: .name =                    s, .value =    34
   56: .name =                    x, .value =     0
   57: .name =                    y, .value =     0
done

functions: (35 count)
    0: .args = (0)[ ]
body: 
instructions: (22 count) 
    0:                  zero : 1                         0 : 34   
    1:                  zero : 1                         1 : 35   
    2:                  incr : 2                         1 : 35   
    3:                  zero : 1                         2 : 36   
    4:                  incr : 2                         2 : 36   
    5:                  incr : 2                         2 : 36   
    6:                  zero : 1                         3 : 37   
    7:                  incr : 2                         3 : 37   
    8:                  incr : 2                         3 : 37   
    9:                  incr : 2                         3 : 37   
   10:                  zero : 1                         4 : 38   
   11:                  incr : 2                         4 : 38   
   12:                  incr : 2                         4 : 38   
   13:                  incr : 2                         4 : 38   
   14:                  incr : 2                         4 : 38   
   15:                  zero : 1                         5 : 39   
   16:                  incr : 2                         5 : 39   
   17:                  incr : 2                         5 : 39   
   18:                  incr : 2                         5 : 39   
   19:                  incr : 2                         5 : 39   
   20:                  incr : 2                         5 : 39   
   21:                     s : 55   
done

[end-body]
    1: .args = (1)[     0 ]
body: 
instructions: (0 count) 
done

[end-body]
    2: .args = (1)[     0 ]
body: 
instructions: (0 count) 
done

[end-body]
    3: .args = (1)[     0 ]
body: 
instructions: (0 count) 
done

[end-body]
    4: .args = (2)[     0     0 ]
body: 
instructions: (0 count) 
done

[end-body]
    5: .args = (2)[     0     0 ]
body: 
instructions: (0 count) 
done

[end-body]
    6: .args = (2)[     0     0 ]
body: 
instructions: (0 count) 
done

[end-body]
    7: .args = (2)[     0     0 ]
body: 
instructions: (0 count) 
done

[end-body]
    8: .args = (2)[     0     0 ]
body: 
instructions: (0 count) 
done

[end-body]
    9: .args = (2)[     0     0 ]
body: 
instructions: (0 count) 
done

[end-body]
   10: .args = (2)[     0     0 ]
body: 
instructions: (0 count) 
done

[end-body]
   11: .args = (2)[     0     0 ]
body: 
instructions: (0 count) 
done

[end-body]
   12: .args = (2)[     0     0 ]
body: 
instructions: (0 count) 
done

[end-body]
   13: .args = (2)[     0     0 ]
body: 
instructions: (0 count) 
done

[end-body]
   14: .args = (2)[     0     0 ]
body: 
instructions: (0 count) 
done

[end-body]
   15: .args = (1)[     0 ]
body: 
instructions: (0 count) 
done

[end-body]
   16: .args = (3)[     0     0     0 ]
body: 
instructions: (0 count) 
done

[end-body]
   17: .args = (3)[     0     0     0 ]
body: 
instructions: (0 count) 
done

[end-body]
   18: .args = (2)[     0     0 ]
body: 
instructions: (0 count) 
done

[end-body]
   19: .args = (2)[     0     0 ]
body: 
instructions: (0 count) 
done

[end-body]
   20: .args = (3)[     0     0     0 ]
body: 
instructions: (0 count) 
done

[end-body]
   21: .args = (3)[     0     0     0 ]
body: 
instructions: (0 count) 
done

[end-body]
   22: .args = (0)[ ]
body: 
instructions: (0 count) 
done

[end-body]
   23: .args = (1)[     0 ]
body: 
instructions: (0 count) 
done

[end-body]
   24: .args = (1)[     0 ]
body: 
instructions: (0 count) 
done

[end-body]
   25: .args = (0)[ ]
body: 
instructions: (0 count) 
done

[end-body]
   26: .args = (1)[     0 ]
body: 
instructions: (0 count) 
done

[end-body]
   27: .args = (1)[     0 ]
body: 
instructions: (0 count) 
done

[end-body]
   28: .args = (1)[    41 ]
body: 
instructions: (1 count) 
    0:                   mul : 7                         x : 41                        x : 41   
done

[end-body]
   29: .args = (1)[    43 ]
body: 
instructions: (1 count) 
    0:                   add : 5                         x : 43                        x : 43   
done

[end-body]
   30: .args = (1)[    45 ]
body: 
instructions: (1 count) 
    0:                  incr : 2                         x : 45   
done

[end-body]
   31: .args = (3)[    47    48    49 ]
body: 
instructions: (3 count) 
    0:                    ne : 20                        a : 48                        b : 49                     done : 50   
    1:                   set : 4                         x : 47                        0 : 34   
    2:                    at : 23                     done : 50   
done

[end-body]
   32: .args = (1)[    52 ]
body: 
instructions: (2 count) 
    0:                   add : 5                         i : 52                        0 : 34   
    1:                   env : 22   
done

[end-body]
   33: .args = (1)[    54 ]
body: 
instructions: (1 count) 
    0:          debug_number : 51                        x : 54   
done

[end-body]
   34: .args = (0)[ ]
body: 
instructions: (5 count) 
    0:                   set : 4                         x : 56                        5 : 39   
    1:                   set : 4                         y : 57                        x : 56   
    2:                   mul : 7                         y : 57                        x : 56   
    3:                 print : 53                        x : 56   
    4:                 print : 53                        y : 57   
done

[end-body]
done

scope stack: (1 count)
	scope     0: 
		[   0]:    0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   40   42   44   46   51   53   55 
		[   1]:   28   29   30   31   32   33   34   35   36   37   38   39 

done

generating inline instructions now...
generating inline:    0:        zero : 1              0 : 34  
generating inline:    1:        zero : 1              1 : 35  
generating inline:    2:        incr : 2              1 : 35  
generating inline:    3:        zero : 1              2 : 36  
generating inline:    4:        incr : 2              2 : 36  
generating inline:    5:        incr : 2              2 : 36  
generating inline:    6:        zero : 1              3 : 37  
generating inline:    7:        incr : 2              3 : 37  
generating inline:    8:        incr : 2              3 : 37  
generating inline:    9:        incr : 2              3 : 37  
generating inline:   10:        zero : 1              4 : 38  
generating inline:   11:        incr : 2              4 : 38  
generating inline:   12:        incr : 2              4 : 38  
generating inline:   13:        incr : 2              4 : 38  
generating inline:   14:        incr : 2              4 : 38  
generating inline:   15:        zero : 1              5 : 39  
generating inline:   16:        incr : 2              5 : 39  
generating inline:   17:        incr : 2              5 : 39  
generating inline:   18:        incr : 2              5 : 39  
generating inline:   19:        incr : 2              5 : 39  
generating inline:   20:        incr : 2              5 : 39  
generating inline:   21:           s : 55  
executing user-defined function: s...
generating inline:    0:         set : 4              x : 56             5 : 39  
generating inline:    1:         set : 4              y : 57             x : 56  
generating inline:    2:         mul : 7              y : 57             x : 56  
generating inline:    3:       print : 53             x : 56  
executing user-defined function: print...
generating inline:    0:  debug_number : 51             x : 54  
executing user-defined function: debug_number...
generating inline:    0:         add : 5              i : 52             0 : 34  
generating inline:    1:         env : 22  
generating inline:    4:       print : 53             y : 57  
executing user-defined function: print...
generating inline:    0:  debug_number : 51             x : 54  
executing user-defined function: debug_number...
generating inline:    0:         add : 5              i : 52             0 : 34  
generating inline:    1:         env : 22  
generated these instructions:
instructions: (28 count) 
    0:                  zero : 1                         0 : 34   
    1:                  zero : 1                         1 : 35   
    2:                  incr : 2                         1 : 35   
    3:                  zero : 1                         2 : 36   
    4:                  incr : 2                         2 : 36   
    5:                  incr : 2                         2 : 36   
    6:                  zero : 1                         3 : 37   
    7:                  incr : 2                         3 : 37   
    8:                  incr : 2                         3 : 37   
    9:                  incr : 2                         3 : 37   
   10:                  zero : 1                         4 : 38   
   11:                  incr : 2                         4 : 38   
   12:                  incr : 2                         4 : 38   
   13:                  incr : 2                         4 : 38   
   14:                  incr : 2                         4 : 38   
   15:                  zero : 1                         5 : 39   
   16:                  incr : 2                         5 : 39   
   17:                  incr : 2                         5 : 39   
   18:                  incr : 2                         5 : 39   
   19:                  incr : 2                         5 : 39   
   20:                  incr : 2                         5 : 39   
   21:                   set : 4                         x : 56                        5 : 39   
   22:                   set : 4                         y : 57                        x : 56   
   23:                   mul : 7                         y : 57                        x : 56   
   24:                   add : 5                         x : 54                        0 : 34   
   25:                   env : 22   
   26:                   add : 5                         x : 54                        0 : 34   
   27:                   env : 22   
done

finding label attrs...
starting the DAG formation stage...
stage: constructing data flow DAG...
generating DAG node for ins: { zero  0  ()  () }
statically_known = 0
generated node #2 into block 0 (of 1): 
inputs and outputs null for now
generating DAG node for ins: { zero  1  ()  () }
statically_known = 0
generated node #3 into block 0 (of 2): 
inputs and outputs null for now
generating DAG node for ins: { incr  1  ()  () }
statically_known = 0
generated node #4 into block 0 (of 3): 
inputs and outputs null for now
generating DAG node for ins: { zero  2  ()  () }
statically_known = 0
generated node #5 into block 0 (of 4): 
inputs and outputs null for now
generating DAG node for ins: { incr  2  ()  () }
statically_known = 0
generated node #6 into block 0 (of 5): 
inputs and outputs null for now
generating DAG node for ins: { incr  2  ()  () }
statically_known = 0
generated node #7 into block 0 (of 6): 
inputs and outputs null for now
generating DAG node for ins: { zero  3  ()  () }
statically_known = 0
generated node #8 into block 0 (of 7): 
inputs and outputs null for now
generating DAG node for ins: { incr  3  ()  () }
statically_known = 0
generated node #9 into block 0 (of 8): 
inputs and outputs null for now
generating DAG node for ins: { incr  3  ()  () }
statically_known = 0
generated node #10 into block 0 (of 9): 
inputs and outputs null for now
generating DAG node for ins: { incr  3  ()  () }
statically_known = 0
generated node #11 into block 0 (of 10): 
inputs and outputs null for now
generating DAG node for ins: { zero  4  ()  () }
statically_known = 0
generated node #12 into block 0 (of 11): 
inputs and outputs null for now
generating DAG node for ins: { incr  4  ()  () }
statically_known = 0
generated node #13 into block 0 (of 12): 
inputs and outputs null for now
generating DAG node for ins: { incr  4  ()  () }
statically_known = 0
generated node #14 into block 0 (of 13): 
inputs and outputs null for now
generating DAG node for ins: { incr  4  ()  () }
statically_known = 0
generated node #15 into block 0 (of 14): 
inputs and outputs null for now
generating DAG node for ins: { incr  4  ()  () }
statically_known = 0
generated node #16 into block 0 (of 15): 
inputs and outputs null for now
generating DAG node for ins: { zero  5  ()  () }
statically_known = 0
generated node #17 into block 0 (of 16): 
inputs and outputs null for now
generating DAG node for ins: { incr  5  ()  () }
statically_known = 0
generated node #18 into block 0 (of 17): 
inputs and outputs null for now
generating DAG node for ins: { incr  5  ()  () }
statically_known = 0
generated node #19 into block 0 (of 18): 
inputs and outputs null for now
generating DAG node for ins: { incr  5  ()  () }
statically_known = 0
generated node #20 into block 0 (of 19): 
inputs and outputs null for now
generating DAG node for ins: { incr  5  ()  () }
statically_known = 0
generated node #21 into block 0 (of 20): 
inputs and outputs null for now
generating DAG node for ins: { incr  5  ()  () }
statically_known = 0
generated node #22 into block 0 (of 21): 
inputs and outputs null for now
generating DAG node for ins: { set  x  5  () }
statically_known = 0
generated node #23 into block 0 (of 22): 
inputs and outputs null for now
generating DAG node for ins: { set  y  x  () }
statically_known = 0
generated node #24 into block 0 (of 23): 
inputs and outputs null for now
generating DAG node for ins: { mul  y  x  () }
statically_known = 0
generated node #25 into block 0 (of 24): 
inputs and outputs null for now
generating DAG node for ins: { add  x  0  () }
statically_known = 0
generated node #26 into block 0 (of 25): 
inputs and outputs null for now
generating DAG node for ins: { env  ()  ()  () }
statically_known = 0
generated node #27 into block 0 (of 26): 
inputs and outputs null for now
generating DAG node for ins: { add  x  0  () }
statically_known = 0
generated node #28 into block 0 (of 27): 
inputs and outputs null for now
generating DAG node for ins: { env  ()  ()  () }
statically_known = 0
generated node #29 into block 0 (of 28): 
inputs and outputs null for now
done creating isa nodes... printing nodes:
printing  29 nodes...
[[32;1mSK[0m] node #0    : {.opcode= 0 ("[35;1m()        [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #1    : {.opcode= 1 ("[35;1mzero      [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #2    : {.opcode= 1 ("[35;1mzero      [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #3    : {.opcode= 2 ("[35;1mincr      [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #4    : {.opcode= 1 ("[35;1mzero      [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #5    : {.opcode= 2 ("[35;1mincr      [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #6    : {.opcode= 2 ("[35;1mincr      [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #7    : {.opcode= 1 ("[35;1mzero      [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #8    : {.opcode= 2 ("[35;1mincr      [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #9    : {.opcode= 2 ("[35;1mincr      [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #10   : {.opcode= 2 ("[35;1mincr      [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #11   : {.opcode= 1 ("[35;1mzero      [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #12   : {.opcode= 2 ("[35;1mincr      [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #13   : {.opcode= 2 ("[35;1mincr      [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #14   : {.opcode= 2 ("[35;1mincr      [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #15   : {.opcode= 2 ("[35;1mincr      [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #16   : {.opcode= 1 ("[35;1mzero      [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #17   : {.opcode= 2 ("[35;1mincr      [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #18   : {.opcode= 2 ("[35;1mincr      [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #19   : {.opcode= 2 ("[35;1mincr      [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #20   : {.opcode= 2 ("[35;1mincr      [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #21   : {.opcode= 2 ("[35;1mincr      [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #22   : {.opcode= 4 ("[35;1mset       [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #23   : {.opcode= 4 ("[35;1mset       [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #24   : {.opcode= 7 ("[35;1mmul       [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #25   : {.opcode= 5 ("[35;1madd       [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #26   : {.opcode=22 ("[35;1menv       [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #27   : {.opcode= 5 ("[35;1madd       [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
[  ] node #28   : {.opcode=22 ("[35;1menv       [0m") .outreg= 0 ("[36;1m()        [0m") .oc= 0 .ic= 0 .io={  |  } }
done
done creating basic blocks... printing cfg/dag:
blocks:
block #  0: {.count = 28, .dag = {   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28 }
[end of cfg]
printing out cfg with node data: 
block #    0:
	node   1:   [32;1m   zero[0m    0("        ()") 18446744073709551615 18446744073709551615

	node   2:   [32;1m   zero[0m    0("        ()") 18446744073709551615 18446744073709551615

	node   3:   [32;1m   incr[0m    0("        ()") 18446744073709551615 18446744073709551615

	node   4:   [32;1m   zero[0m    0("        ()") 18446744073709551615 18446744073709551615

	node   5:   [32;1m   incr[0m    0("        ()") 18446744073709551615 18446744073709551615

	node   6:   [32;1m   incr[0m    0("        ()") 18446744073709551615 18446744073709551615

	node   7:   [32;1m   zero[0m    0("        ()") 18446744073709551615 18446744073709551615

	node   8:   [32;1m   incr[0m    0("        ()") 18446744073709551615 18446744073709551615

	node   9:   [32;1m   incr[0m    0("        ()") 18446744073709551615 18446744073709551615

	node  10:   [32;1m   incr[0m    0("        ()") 18446744073709551615 18446744073709551615

	node  11:   [32;1m   zero[0m    0("        ()") 18446744073709551615 18446744073709551615

	node  12:   [32;1m   incr[0m    0("        ()") 18446744073709551615 18446744073709551615

	node  13:   [32;1m   incr[0m    0("        ()") 18446744073709551615 18446744073709551615

	node  14:   [32;1m   incr[0m    0("        ()") 18446744073709551615 18446744073709551615

	node  15:   [32;1m   incr[0m    0("        ()") 18446744073709551615 18446744073709551615

	node  16:   [32;1m   zero[0m    0("        ()") 18446744073709551615 18446744073709551615

	node  17:   [32;1m   incr[0m    0("        ()") 18446744073709551615 18446744073709551615

	node  18:   [32;1m   incr[0m    0("        ()") 18446744073709551615 18446744073709551615

	node  19:   [32;1m   incr[0m    0("        ()") 18446744073709551615 18446744073709551615

	node  20:   [32;1m   incr[0m    0("        ()") 18446744073709551615 18446744073709551615

	node  21:   [32;1m   incr[0m    0("        ()") 18446744073709551615 18446744073709551615

	node  22:   [32;1m    set[0m    0("        ()") 18446744073709551615 18446744073709551615

	node  23:   [32;1m    set[0m    0("        ()") 18446744073709551615 18446744073709551615

	node  24:   [32;1m    mul[0m    0("        ()") 18446744073709551615 18446744073709551615

	node  25:   [32;1m    add[0m    0("        ()") 18446744073709551615 18446744073709551615

	node  26:   [32;1m    env[0m    0("        ()") 18446744073709551615 18446744073709551615

	node  27:   [32;1m    add[0m    0("        ()") 18446744073709551615 18446744073709551615

	node  28:   [32;1m    env[0m    0("        ()") 18446744073709551615 18446744073709551615

}
[end of node cfg]
finished the trickiest stage.
executing instructions... 
[32;1mdebug:   0x0 : 0[0m
[32;1mdebug:   0x0 : 0[0m
registers: (58 count)

    0: 0x0000000000000000     0          1: 0x0000000000000000     0      
    2: 0x0000000000000000     0          3: 0x0000000000000000     0      
    4: 0x0000000000000000     0          5: 0x0000000000000000     0      
    6: 0x0000000000000000     0          7: 0x0000000000000000     0      
    8: 0x0000000000000000     0          9: 0x0000000000000000     0      
   10: 0x0000000000000000     0         11: 0x0000000000000000     0      
   12: 0x0000000000000000     0         13: 0x0000000000000000     0      
   14: 0x0000000000000000     0         15: 0x0000000000000000     0      
   16: 0x0000000000000000     0         17: 0x0000000000000000     0      
   18: 0x0000000000000000     0         19: 0x0000000000000000     0      
   20: 0x0000000000000000     0         21: 0x0000000000000000     0      
   22: 0x0000000000000000     0         23: 0x0000000000000000     0      
   24: 0x0000000000000000     0         25: 0x0000000000000000     0      
   26: 0x0000000000000000     0         27: 0x0000000000000000     0      
   28: 0x0000000000000000     0         29: 0x0000000000000000     0      
   30: 0x0000000000000000     0         31: 0x0000000000000000     0      
   32: 0x0000000000000000     0         33: 0x0000000000000000     0      
   34: 0x0000000000000000     0         35: 0x0000000000000001     1      
   36: 0x0000000000000002     2         37: 0x0000000000000003     3      
   38: 0x0000000000000004     4         39: 0x0000000000000005     5      
   40: 0x0000000000000000     0         41: 0x0000000000000000     0      
   42: 0x0000000000000000     0         43: 0x0000000000000000     0      
   44: 0x0000000000000000     0         45: 0x0000000000000000     0      
   46: 0x0000000000000000     0         47: 0x0000000000000000     0      
   48: 0x0000000000000000     0         49: 0x0000000000000000     0      
   50: 0x0000000000000000     0         51: 0x0000000000000000     0      
   52: 0x0000000000000000     0         53: 0x0000000000000000     0      
   54: 0x0000000000000000     0         55: 0x0000000000000000     0      
   56: 0x0000000000000005     5         57: 0x0000000000000019    25      
done

