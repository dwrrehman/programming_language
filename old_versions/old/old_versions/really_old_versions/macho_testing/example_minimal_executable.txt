; A minimal Mach-o x64 executable for OS X Sierra
; $ nasm -f bin -o tiny_hello tiny_hello.s
; $ chmod +x tiny_hello
; Constants (For readability)


%define MH_MAGIC_64               0xfeedfacf
%define CPU_ARCH_ABI64            0x01000000
%define    CPU_TYPE_I386          0x00000007
%define CPU_TYPE_X86_64           CPU_ARCH_ABI64 | CPU_TYPE_I386
%define CPU_SUBTYPE_LIB64         0x80000000
%define CPU_SUBTYPE_I386_ALL      0x00000003
%define MH_EXECUTE                0x2
%define MH_NOUNDEFS               0x1
%define LC_SEGMENT_64             0x19
%define LC_UNIXTHREAD             0x5 
%define VM_PROT_READ              0x1
%define VM_PROT_WRITE             0x2
%define VM_PROT_EXECUTE           0x4
%define x86_THREAD_STATE64        0x4

%define    x86_EXCEPTION_STATE64_COUNT    42

%define SYSCALL_CLASS_SHIFT           24
%define SYSCALL_CLASS_MASK            (0xFF << SYSCALL_CLASS_SHIFT)
%define SYSCALL_NUMBER_MASK           (~SYSCALL_CLASS_MASK)  
%define SYSCALL_CLASS_UNIX            2

%define SYSCALL_CONSTRUCT_UNIX(syscall_number) \
            ((SYSCALL_CLASS_UNIX << SYSCALL_CLASS_SHIFT) | \
             (SYSCALL_NUMBER_MASK & (syscall_number)))

%define SYS_exit                    1
%define SYS_write                   4


__origin:


; Mach-O header
DD        MH_MAGIC_64                                        ; magic
DD        CPU_TYPE_X86_64                                    ; cputype
DD        CPU_SUBTYPE_LIB64 | CPU_SUBTYPE_I386_ALL           ; cpusubtype
DD        MH_EXECUTE                                         ; filetype
DD        3                                                  ; ncmds
DD        __COMMANDSend  - __COMMANDSstart                   ; sizeofcmds
DD        MH_NOUNDEFS                                        ; flags
DD        0x0                                                ; reserved

__COMMANDSstart:


___PAGEZEROstart:
        DD        LC_SEGMENT_64                                    ; cmd
        dd         ___PAGEZEROend - ___PAGEZEROstart               ; command size
hello_str:
        db         '__PAGEZERO',0,0,0,0,0,0 			   ; segment name (pad to 16 bytes)
        DQ        0                                                ; vmaddr
        DQ        __origin                                         ; vmsize
        DQ        0                                                ; fileoff
        DQ        0                                                ; filesize
        DD        0                                                ; maxprot
        DD        0                                                ; initprot
        DD        0x0                                              ; nsects
        DD        0x0                                              ; flags
___PAGEZEROend:


; Segments
___TEXTstart:
        DD        LC_SEGMENT_64                                    ; cmd
        dd ___TEXTend - ___TEXTstart     			   ; command size
        db '__TEXT',0,0,0,0,0,0,0,0,0,0				   ; segment name (pad to 16 bytes)
        DQ        __origin                                         ; vmaddr
        DQ        ___codeend - __origin                  	   ; vmsize
        DQ        0                                                ; fileoff
        DQ        ___codeend - __origin                     	   ; filesize
        DD        VM_PROT_READ | VM_PROT_WRITE | VM_PROT_EXECUTE   ; maxprot
        DD        VM_PROT_READ | VM_PROT_EXECUTE                   ; initprot
        DD        0x0                                              ; nsects
        DD        0x0                                              ; flags
___TEXTend:

__UNIX_THREADstart:
DD        LC_UNIXTHREAD                                 ; cmd
DD        __UNIX_THREADend - __UNIX_THREADstart         ; cmdsize
DD        x86_THREAD_STATE64                            ; flavor
DD        x86_EXCEPTION_STATE64_COUNT                   ; count
DQ        0, 0, 0, 0                                	; rax, rbx , rcx , rdx
DQ        1, hello_str, 0, 0                        	; rdi = STDOUT, rsi = address of hello_str,  rbp, rsp
DQ        0, 0                                          ; r8 and r9
DQ        0, 0, 0, 0, 0, 0                 		; r10, r11, r12, r13, r14, r15
DQ         ___codestart, 0, 0, 0, 0              	; rip, rflags, cs, fs, gs
__UNIX_THREADend:

__COMMANDSend:



___codestart:                                                    ; 24 bytes
    ; rdi and rsi have already been set in the initial state
    mov        rdx, 11
    mov        rax, SYSCALL_CONSTRUCT_UNIX(SYS_write)
    syscall
    mov            rdi, rax
    mov            rax, SYSCALL_CONSTRUCT_UNIX(SYS_exit)
    syscall
___codeend:


    times 4096-($-$$) DB  0;
    filesize    EQU    $-$$










































DD        LC_UNIXTHREAD                                 ; cmd
DD        __UNIX_THREADend - __UNIX_THREADstart         ; cmdsize
DD        x86_THREAD_STATE64                            ; flavor
DD        x86_EXCEPTION_STATE64_COUNT                   ; count






	__uint64_t x[29]; /* General purpose registers x0-x28 */
	__uint64_t fp;    /* Frame pointer x29 */
	__uint64_t lr;    /* Link register x30 */
	__uint64_t sp;    /* Stack pointer x31 */
	__uint64_t pc;    /* Program counter */
	__uint32_t cpsr;  /* Current program status register */
	__uint32_t __pad; /* Same size for 32-bit or 64-bit clients */















other helpful stuff:




/*
 * Thread commands contain machine-specific data structures suitable for
 * use in the thread state primitives.  The machine specific data structures
 * follow the struct thread_command as follows.
 * Each flavor of machine specific data structure is preceded by an uint32_t
 * constant for the flavor of that data structure, an uint32_t that is the
 * count of uint32_t's of the size of the state data structure and then
 * the state data structure follows.  This triple may be repeated for many
 * flavors.  The constants for the flavors, counts and state data structure
 * definitions are expected to be in the header file <machine/thread_status.h>.
 * These machine specific data structures sizes must be multiples of
 * 4 bytes.  The cmdsize reflects the total size of the thread_command
 * and all of the sizes of the constants for the flavors, counts and state
 * data structures.
 *
 * For executable objects that are unix processes there will be one
 * thread_command (cmd == LC_UNIXTHREAD) created for it by the link-editor.
 * This is the same as a LC_THREAD, except that a stack is automatically
 * created (based on the shell's limit for the stack size).  Command arguments
 * and environment variables are copied onto that stack.
 */
struct thread_command {
	uint32_t	cmd;		/* LC_THREAD or  LC_UNIXTHREAD */
	uint32_t	cmdsize;	/* total size of this command */
	/* uint32_t flavor		   flavor of thread state */
	/* uint32_t count		   count of uint32_t's in thread state */
	/* struct XXX_thread_state state   thread state for this flavor */
	/* ... */
};


















