wrote on 1202507034.194827 
more comments from the compiler source:
including the top header:





// 1202504045.155147 a compiler / assembler for a simpler version of the language.
// 1202505106.125751 revised to be much simpler and have a simpler translation process.
// 1202505294.204607 revised the ct system!
// 1202506194.015825 added macro-arg references and macros! also added ct memory mapped io, and changed ctsc interface

// 1202507034.001941 revised the spellings of a couple of long-named instructions:

// ct rt or si sd la ld st lt ge ne eq do at sc
// set add sub mul div rem and eor adr reg del str
// file halt emit bits


//1202507023.232230
//   NEW IDEA:     lets delete the       "la"   instruction entirely. 

//		its technically not required,  if we just give a error on a label being at-less
//				ie, it was never given a position! 
// that recreates the same thing basically. easily. hmmmm
// i'll think on it more. 





// new optimization:  add on   to    copy prop:
// ..............................................................................
//
//   make rt la's function like   rt set statements.    when you see:
//
//       la x label
//       set y x
//
//
//    that should translate simply to:
//
//       la y label
// 








// 1202507023.232237
// LICM  starting:

/*

	conditions for   seeing    loop invariant values:


		for a given operation,     op d s r

			d is LI   if  LI(s) and LI(r)

				

		LI(x) is the case for a variable if:
			x is a constant, or
			x was given its value(definition) via an instruction which is not contained in the control flow loop!, or
			x was given its value via an operation  which is also LI. 
				ie, its a transitive / recursive defintion kinda 





	to do this, we'll track the transitive nature of this simply using our typical data flow anaysis pass machinery, i think, 


		but then, we need some way of notating the fact that  a given statement is either inside or outside a given control flow graph loop. 

		i think we should write a function which tries to find this, or some sort of dedicated algorithm to find out if a given statement is inside a loop or not. 
		basically, we just need to fuzzily traverse the loop, and see if we eventually come across the instruction?.. hmmm i think so.. 


	 i think finding which instructions are partttt of a given loop     is the first step actually 


		even  thus    defining the notion of    a loop  in the first place 


				in the compiler       thats important to do.   so yeah. lets do that first, actually. 






		






*/



// current bugs: 1202506227.185435
// ------------------------------------

//  0. allow for arbitrary variables to be passed into macros as by-ref or by-value variables.
//		we should be able to annotate the reference-ness for each argument to a macro!
//		(runtime variables are passed by reference by default, and ct are passed by value by default. 

//  1. RA doesnt do disjoint live ranges. we need to do this. 

//  4. add obs instruction to allow macros to define arguments. 

//  5. add more isel for arm64. 











/*
	r_type: 	
		a0: opcode(0-6)  
		a1: rd(7-11)   
		a2: funct3(12-14)
		a3: rs1(15-19)
		a4: rs2(20-24)
		a5: funct7(25-31)

	i_type: 
		a0: opcode(0-6)
		a1: rd(7-11)
		a2: funct3(12-14)
		a3: rs1(15-19)
		a4: imm_11_0(20-31)

	s_type: 	
		a0: opcode(0-6)  
		a1: imm_4_0(7-11)
		a2: funct3(12-14)
		a3: rs1(15-19)
		a4: rs2(20-24)
		a5: imm_5_11(25-31)

	b_type: 
		a0: opcode(0-6)
		a1: imm_4_1_11(7-11)
		a2: funct3(12-14)
		a3: rs1(15-19)
		a4: rs2(20-24)
		a5: imm_12_10_5(25-31)

	u_type: 	
		a0: opcode(0-6)
		a1: rd(7-11)
		a2: imm_31_12(12-31)

	j_type: 	
		a0: opcode(0-6)
		a1: rd(7-11)
		a2: imm_20_10_1_11_19_12(12-31)
*/





/*

notes on defining variables:
-------------------------------

	the semantics in the compiler/language for defining varaibles will always be "define-on-use",

		ie, if you see that you are trying to use a vairable that isnt defined, it will just define it, 

				iffffff and only if one of the few things are the following:


					1. you are using a    set   ld   or la    operation   (ie, particular language builtins)

					2. you using a macro which has that particular argument  marked as "obs"

								ie, observable, meaning it has define on use semantics. 
									observable also implies   reference   as well. 

					3. it is a label argument position in a builtin such as:
							at, do, lt, eq, ne, ge,  la


		so yeah, unless its one of those casese,
			then the arguments to macros or any operation   for that matter 

			must be predefined. the variable must exist already lol



a side effect of this is that   now variables arent able to shadow each other.... 

		but i think i'll just be okay with that    becuase     shadowing isnt the greatest thing anywaysss

		so yeah 



cool 





so, to mark an argument as define on use in the macro system, we'll use this:


	obs <binaryliteral>


and that will make argument N  observable    (ie, have define on use semantics, and also be a reference variable) 

	where N is the binary literal



we never have to attribute      by-value    semantics for a variable argument, because thats the default    for CT vars. 
	and RT vars cannottt everrrrr be by-value     because thats physically impossible for CT macro machinery to do that  lol


	so we just need to attribute     reference semanticss


		and the idea is that     you would never reallyyyy want to take something by reference,  

							yet       NOTTT have it be observable?.. hmmmm crapppp



		yeah technically those are orthogonal kinda?


			taking something by reference    and making something observable 



		you could want:


			CT by value
			CT by reference
			CT by reference and observable

			RT by reference
			RT by reference and observable



hmmm okay

	wellll if thatssss the case 

	hmmm

okay

	
	well
		so the other thing is that 


	the user should be able to pass in either a RT or CT variable  at a given argument position, 
		and the macro should be able to introspect whether it is CT or RT lol. 
		


	buttt, the thing is, 

		observability is    a contract set up front   by the macro callll
		its not something that can be changed

	so we needddd to have a way of attributing obs   on an arg 


	buttt we dontttt need to attribute ct/rt ness     on an arg 

	interestinggg


	what about    reference ness?


	wellll   for    RT vars  its set in stone 

	but for CT vars, its not... 
		we could pass in references    or nottt


	interestinggg



	welll okay hold on 

	what if    we just made     two ct memory variables   as implicit inputs  to the macros



		where

			all ct var values    are passed    by reference 

				(ie, macro like semantics)

			all rt var's   are passed      by reference


	
			BUTTTT

				if you pass in a binary literal to a position, 

				then you can   be notified of thatttt happening   for that argument


				by simply checking the   is_binaryliteral     field    in a particular memory array location!


			so

				we   ALWAYSSS will take everything by  REFERENCE

						ie, you     b:cannot;    take a CT variable   by VALUE!!!!!!!

				but then 	


					if you pass in a binary literal   (ie, an r-value)      then you will be notified of that, 

							so that the macro itself     can either   error,  or   do something, idk lol

							you can process the fact that you received a binary literal for something which you werent thinking of it being a binary literal lollll

								so yeah     cool yayy



							its almost as simple as    just storing the  macro call's   .imm field 

								into memory... 

									is it LITERALLYYY that simple?     lol
											wow



							okay cool lol 




								yay


							and then obviously we also need to attribute whether a given variable is compiletime known or not lol

								so yeah 

								coooooooool




							we need to tell that information to the macro body lol


								orrrrr we couldddd just have a way of looking it upppp programaticallyyyy

											oh my goshhh

									wait yeah that could work 

						its just a way of    getting a compiletime value    during CTE1   of whether a vairable is compiletime or runtimeeee


								oh  my actual goshh



						YESS


						now we don't even need any of thisss oh my goshhh

							at least i think???


							hmmm


							wait no that doesnt work  because we need to     crappp


							no 
									the callllllll  code needs to store information about what the original thingies were... 


									OH WAIT IT DOESNT       YES WE CAN DO THISSS YAYYY


									we just need to know if a binary literalllll was passed in


											cooooolll



										okay

									thats easy lol

									i don't know how to do the binary literal part  that well,


								the problem is, it limits the number of binary literal arguments we can pass in to a call    to merely   64 lol

									hmmm    i mean          lol     i think thats fine though 


									and its only affecting binary literals too 


									soooo  yeah i think we are fine lolllll




									 							
									basically because we'll be storing a   nat   uint64_t 

										into CT memory lol     for the .imm field lol


										YAYY


						cool this is so simple oh my gosh




	and then  all we'll need to add   (other than this binlit ctm semantics)


		is the    obs <N>    instruction  


		which allows you to mark a macro's Nth argument   as     define-on-use 

			ie, observable 


			and thus 

				we can take labels as arguments,  we can define variables into the outter scope, 
				and just generally speaking    yeah   things will work well

					YAYYYY


		

	so the valid argument semantics combinations are thus only:



		CT binary literal	-  by value 

		CT variable 		- by reference

		CT variable		- by reference, and observable

		RT variable 		- by reference

		RT variable		- by reference, and observable



	and then we'll add an instruction to also ask if a given variable is CT or RT,  i think as well, right?
		we need that too?

		ie, 


		we'll add:
				obs b        :  b is a binary literal denoting the argument position which is define-on-use
				ctk d s      :  if s is compiletime known,  d will be set to 1, else 0. 



now, we could even    make it so that 

	wehn you pass a binary literal into a macro, 

		a temporary CT variable    with that binary literal value 

			is created 

			and that THATTT variable is passed in 


			i don't reallyyyyy like that tho lol

		idk

		hmm



	yeah probably not lol

	its okay


	we'll just pass in the binary literals themselves lol




so yeah


cool 


		oh also i want to make it so that       when you say     dr x      it deferences it   for all instructions that use x, 

			ie, its impossible to   use  x   and dr x     simulatneously   you need to choose lol

			well i mean i guess you could use  x prior to the  dr x  setting lol
				so yeah  cool that works i guess lol


				but 

				yeah   dr should be persistent  across instructions, so you don't need to say it constantly for every instruction lollll

				cool 

	yay









also i want to change up how we get string lengths!



i think we should add a   length   instruction honestly.. hmmm idk.. 


but the idea would be that


	we pass in the label which is associated with the string 


	and upon saying   string "blah"         we will actually note the most recently defined symbol 

		which will be associated with this string loll

			so yeah


					(needs to be a label too!)


		that way we never have to deal with string indexes 


		cool





so in total, the changes are:

	1. add   obs N   instruction      (....make this builtin  to the  operation instruction?  (ie, taking a bit field?))

	2. add   ctk d s  instruction     (...make this a compiletime system call?... hmmmm)

	3. make   dr x    persistent   (never clear  the replace[]  array values!)     --> rename this to "deref x"

	4. make  string s   attribute the most recently defined label   associated with this string. 

	5. add a   length s   instruction   to pass in the label  which the string is associated with

	6. add a   CT memory location   is_immediate   bit field   one bit for each argument 
			which is populated for each macro call   by the compiler, when generating the call. 	

	7. 






nope actually, we are going to revise this to simply:            (note, we arent adding any new instructions!!! niceeee)


	1. keep the compiler system call  getlength, 
			but make it do logic to look up the referenced string 
			via the label's dictionary index. thatsss what we need to do.


			in userland, we'll have the following macro in the standard library:





				operation stringlength 01 1     (the 1 here means that arg0 is obs! niceeee)
				at stringlength ct

						(no binary literals are valid to give to this macro!)

					ld ra compiler_ctsc_number nat
					ld result compiler_ctsc_arg0 nat  deref result   (this is persistent!)
					ld label compiler_ctsc_arg1 nat
					
					st compiler_ctsc_number compiler_get_length nat

					st compiler_ctsc_arg0 label nat
						(label is a dictionary index here, 
						not the variable itself)

					system   
						(arg0 will now be populated with the length associated 
						with the string associated with the label that 
						was passed into the macro's arg0!)

					ld result compiler_ctsc_arg0 nat

					do ra 
					del ra del label





	2. make   the existing instruction   string s   attribute which label it was defined under!
			we'll use this information  in the   getlength    system call. 


	3. add a compiler system call  iscompiletime    (don't add  the     "ctk d s"    instruction!)


	4. add a new argument to the "operation" instruction!  a new binary literal 
		which is a bit field  per operation, telling if it is observable. 


	5. add a new compiletime memory location which is populated on macro calls by the compiler. 


	6. change the semantics of   dr x    to make replace[]  values persistent.   set but never reset. 



(my todo)



i think thats it actually!!!

niceeee

YAYYY

lets do thisss





*/














// todo: add  the "obs" instruction to the langauge,   to the parser   to the macro machinery,  
//   which allows you to specify a particular argument index  that is   define on use,   ie, force defined.      it targets the latest defined macro always. 
//        example:         obs 11           make   args[3]  for this macro   be define on use.    (or force define...?)    hmmm

//  0. we need to allow for arbitrary constants or runtime variables to be passed into macros. it shouldnt specialize the arg type. 
//  0.0. we should just be able to detect what type was stored into memory. for that, i think we will store into   ctsc_auxilary_register     or maybe arg0 or something
//               a 64 bit bitvector telling us whether the variables are ct or rt.    thus, there would be 64 arguments maximum.. hmmmmmm crapppppppp hmmmmmm
//							i mean, thats probably plenty lol. yeah. probably. 64 is definitely plenty. 








// done:
// _____________________

//  x 2. RA needs to handle user-given RI constraints correctly.

//  x 3. CTE2 is marking certain variables as CTK when they shouldnt be.

//  x 6. test load and store instructions for c backend. add various sizes of ld and st sizes. 







		//
		// BUG IN RA:   
		//	we need to be looking at the 
		//	number of "disjoint live ranges" for a variable. 
		//	and treating those as seperate variables!!!!
		//





// 1202506253.014249 i am going to try to get this language operational for using arm64! should be fun lol. 






/*	



nat output = 0;
			if (n == compiler_abort) abort();
			else if (n == compiler_exit) exit(arg0);
			else if (n == compiler_read) { output = read(arg0, arg1, arg2); }
			else if (n == compiler_write) { output = read(arg0, arg1, arg2); }
			else { printf("error: unknown compiler CT system call: 0x%llx\n", n); abort(); } 


//const nat should_store_value = (is_immediate >> a) & 1LLU;
				//const nat immediate = 5LLU | (should_store_value << 1LLU);

*/



/*static nat read_single_char_from_stdin(void) {
	struct termios terminal = {0};
	tcgetattr(0, &terminal);
	struct termios copy = terminal; 
	copy.c_cc[VMIN] = 1; 
	copy.c_cc[VTIME] = 0;
	copy.c_lflag &= ~((size_t) ECHO | ICANON);
	tcsetattr(0, TCSANOW, &copy);

	char c = 0;
	ssize_t n = read(0, &c, 1);
	if (n <= 0) { 
		puts("compiler: fatal error: input/output error: "); 
		perror("read"); 
		abort(); 
	}

	tcsetattr(0, TCSANOW, &terminal);	
	return (nat) c;
}*/



	/*int left_to_print = max_name_width - (int) strlen(operations[this.op]);
	if (left_to_print < 0) left_to_print = 0;
	for (int i = 0; i < left_to_print; i++) putchar(' ');
	putchar(' '); }*/


			/*if (val0 == 8 * compiler_get_length) {
				for (nat i = 0; i < string_list_count; i++) {
					if (string_label[i] != val1) continue;
					store_nat_to_memory(
						memory, compiler_arg0,
						strlen(string_list[i])
					);
				}
			} else if (val0 == 8 * compiler_is_compiletime) {
				store_nat_to_memory(
					memory, compiler_arg0, 
					is_constant[val1]
				);
			}*/








